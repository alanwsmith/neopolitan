---: CONTENT

# Neopolitan Reference

This document defines Neopolitan transformations. 

This document is maintained with revisions. Any 
parser that produces the same output as the (TKTKTKTK link)
neopolitan-py reference implementation is a valid 
Neopolitan interpreter for that revision. Providing
additional functionality is encouraged. 

Every effort will be made to ensure backward 
compatability once revision 1 is published. (Preview
revisions before revision 1 will be used to
finalize the first revision in an effort to lock
in its long term stability)

---: HIDDEN

TODO: 

- Move this file to a stable location in 
the main git repo. 

- Separate out the python code. It is
to be maintained ina separae repo. The idea
is that there's not a reference implementation. 
It only matters if all the test cases pass. 




---: CONTENT

## Test Cases 

These are the test cases. 



## Overview

This document contains examples of all features in 
one place. 

## Examples

### Headers

Headers are made with between one and six 
*#* characters that map to `<h1>` to
`<h6>`

---: TEXT

---
- <<text
---

---: TEXT


- <<code

- <<text|&#39;|>>

- <<text|&#39;|:class something|>>

- *<<text|&#39;|>>






---: NOTES

- If you need to but < or > in code see if you need
to add a | 

- Setup: 

<<span|some text|:id some-id|:class some classes|>>

- Make closing `>>` tags allow an optional `|`
or should that be mandatory? Feels like maybe so 
that it's explicit and consistent

- definitely make `` work


---: CONTENT

## Tags

- div 

- code

- span

<<div|this is some text|:id some-id|>>

<<div|this is some text|:id some-id>>

For div span and code, any following item that starts with
a `:` will turn into an attribute for the opening tag. 

Stuff without the `:` is not part of the spec but 
can be used in whatever way the implementaiton wants. 





---: CONTENT

And single lines like this.

## Formatting

Headers are marked with between 1-6 <<code|#>>
characters at the start of a line.

There is <<text|*|strong>>*bold*<<text|*|strong>>



There is <<text|*|strong|>>*bold*<<text|*|strong|>>


TODO: Figure out is <<<text|tree>>> works for a way
to pass things through so you can see them 


---: HIDDEN

Content in hidden sections isn't output. 



_



---: DESCRIPTIONS
:::: :class desription-example

- open with a dash

the description itself follows

- an important detail
is that

both the initail text and the full
defintion can be on multiple lines

- the *can* <<link|0|link>>

in _both_ the initial and 
<<link|0|lower levels>>

You can also have multipe paragraphs
in a description like this one. 





An characters that you don't want to get converted go in
<<code|text>> tags <<text|*>>

<<span|this is some stuff that will have a span on it|


---: QUOTE

This is a multiline block quote. 

With <<link|0|links>> and 
<<code|print('code')|python>>




---: TODO

[] Figure out tables

[] Add escaping to pipes in double tags

[x] Add description lists

[] Also test todos
that move to multiple lines

And multipe paragraphs


---: CONTENT

TODOs and other blocks are stopped when
another <<code|---:>> marker shows up. 

Moving between any type of block is possible. 

CONTENT is the one to default to. 


---: DIV
:::: :id main-references
:::: :class references

### div wrappers

divs with distint attributes can be added 
at any locaiton that wrap content. They are 
processed like normal content. 

- <<link|0|alpha>> - the quick brown fox

- <<link|0|bravo>> - the quick brown fox


---: CONTENT

## Links

SHould links have attributes in the tags or should
those be stored in the metadata... feels like it's 
nicerer to have them up top. So, make them both 
an option. 

<<link|1|basic link|>>

<<link|1|link with " and < and >|>>

<<link|1|link that
breaks lines|>>

<<link|1|extra attributes|:id some-id|:class some class|>>

<<link|1|atts break lines|:id
link-jump-line|>>


