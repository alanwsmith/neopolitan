---: CONTENT

# Neopolitan Reference

This document defines neopolitan transformations. 

This document is maintained with revisions. Any 
parser that produces the same output as the (TKTKTKTK link)
neopolitan-py reference implementation is a valid 
Neopolitan interpreter for that revision. Providing
additional functionality is encouraged. 

Every effort will be made to ensure backward 
compatibility once revision 1 is published. (Preview
revisions before revision 1 will be used to
finalize the first revision in an effort to lock
in its long term stability)

Validation is done via HTML. 

---: HIDDEN

[] Description lists
[] TODO Lists
[] ::: :headers - which are attributes that are included
[] ::: ~headers - which are custom thing that can be used by interpreters  


---: HIDDEN

Metadata (LINKS, REFERENCES, and WIDGETS) can be called from
external sources via a url or file location. Anything starting
with a `/` slash is a path accessible from the local file system
starting for the root. Anything starting with a `./` dot slash
is a relative path. Everything else needs to be interpreted 
by the parser. (this should cover windows `C:/` when that format
is used, but need to verify)


- Separate out the python code. It is
to be maintained ina separate repo. The idea
is that there's not a reference implementation. 
It only matters if all the test cases pass. 

Guidelines:

- remove leading and trailing whitespace from inside 
tags that aren't preformatted.

- white space (including empty lines) is fine between html
output lines. 






---: CONTENT

## Test Cases 

---: TEST

Single line paragraph

--------------------------------------------------

This is a paragraph on a single line

--------------------------------------------------
<p>This is a paragraph on a single line</p>
--------------------------------------------------


---: TEST

Multi line paragraph

--------------------------------------------------

This is a
paragraph
on multiple
lines

--------------------------------------------------
<p>This is a paragraph on multiple lines</p>
--------------------------------------------------


---: TEST

Multiple paragraphs

--------------------------------------------------

This is three paragraphs with
multiple lines in a content section.

Two blue fish swam in the tank. A saw is 
a tool used for making boards.

Cut the pie into large parts. There are more than 
two factors here. Split the log with a quick, sharp 
blow. Oak is strong and also gives shade.

--------------------------------------------------
<p>This is three paragraphs with multiple lines in a content section.</p>
<p>Two blue fish swam in the tank. A saw is a tool used for making boards.</p>
<p>Cut the pie into large parts. There are more than two factors here. Split the log with a quick, sharp blow. Oak is strong and also gives shade.</p>
--------------------------------------------------

---: TEST

White space at the end of a paragraph is stripped

--------------------------------------------------

Trailing whitespace removal check  

--------------------------------------------------
<p>Trailing whitespace removal check</p>
--------------------------------------------------


---: TEST

Properly escape HTML characters

--------------------------------------------------

Checking & ' " < >

--------------------------------------------------
<p>Checking &amp; &#39; &quot; &lt; &gt;
--------------------------------------------------


---: TEST

Unordered lists with and without spaces and
with mutiple lines with and withone indents
with white space at the end that is removed

--------------------------------------------------

- Item 1 that is on one line

- Item 2 that is on 
multiple lines without an indent 

- Item 3 that is on multiple 
    lines with an indent 

--------------------------------------------------
<ul>
<li>Item 1 that is on one line</li>
<li>Item 2 that is on multiple lines without an indent</li>
<li>Item 3 that is on multiple lines with an indent</li>
</ul>
<p>After the list</p>
--------------------------------------------------

---: TEST

Ordered list

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------














## Overview

This document contains examples of all features in 
one place. 

## Examples

### Headers

Headers are made with between one and six 
*#* characters that map to `<h1>` to
`<h6>`

---: TEXT

---
- <<text
---

---: TEXT


- <<code

- <<text|&#39;|>>

- <<text|&#39;|:class something|>>

- *<<text|&#39;|>>






---: NOTES

- If you need to but < or > in code see if you need
to add a | 

- Setup: 

<<span|some text|:id some-id|:class some classes|>>

- Make closing `>>` tags allow an optional `|`
or should that be mandatory? Feels like maybe so 
that it's explicit and consistent

- definitely make `` work


---: CONTENT

## Tags

- div 

- code

- span

<<div|this is some text|:id some-id|>>

<<div|this is some text|:id some-id>>

For div span and code, any following item that starts with
a `:` will turn into an attribute for the opening tag. 

Stuff without the `:` is not part of the spec but 
can be used in whatever way the implementaiton wants. 





---: CONTENT

And single lines like this.

## Formatting

Headers are marked with between 1-6 <<code|#>>
characters at the start of a line.

There is <<text|*|strong>>*bold*<<text|*|strong>>



There is <<text|*|strong|>>*bold*<<text|*|strong|>>


TODO: Figure out is <<<text|tree>>> works for a way
to pass things through so you can see them 


---: HIDDEN

Content in hidden sections isn't output. 



_



---: DESCRIPTIONS
:::: :class desription-example

- open with a dash

the description itself follows

- an important detail
is that

both the initail text and the full
defintion can be on multiple lines

- the *can* <<link|0|link>>

in _both_ the initial and 
<<link|0|lower levels>>

You can also have multipe paragraphs
in a description like this one. 





An characters that you don't want to get converted go in
<<code|text>> tags <<text|*>>

<<span|this is some stuff that will have a span on it|


---: QUOTE

This is a multiline block quote. 

With <<link|0|links>> and 
<<code|print('code')|python>>




---: TODO

[] Figure out tables

[] Add escaping to pipes in double tags

[x] Add description lists

[] Also test todos
that move to multiple lines

And multipe paragraphs


---: CONTENT

TODOs and other blocks are stopped when
another <<code|---:>> marker shows up. 

Moving between any type of block is possible. 

CONTENT is the one to default to. 


---: DIV
:::: :id main-references
:::: :class references

### div wrappers

divs with distint attributes can be added 
at any locaiton that wrap content. They are 
processed like normal content. 

- <<link|0|alpha>> - the quick brown fox

- <<link|0|bravo>> - the quick brown fox


---: CONTENT

## Links

SHould links have attributes in the tags or should
those be stored in the metadata... feels like it's 
nicerer to have them up top. So, make them both 
an option. 

<<link|1|basic link|>>

<<link|1|link with " and < and >|>>

<<link|1|link that
breaks lines|>>

<<link|1|extra attributes|:id some-id|:class some class|>>

<<link|1|atts break lines|:id
link-jump-line|>>


