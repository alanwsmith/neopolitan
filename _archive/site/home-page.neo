---: TITLE 

neopolitan


---: SUBTITLE

neo for short



---: WARNING 
:::: :class heads-up

## DRAFT

This site is the home of the neopolitan 
plain-text file format

Or, it will be when I finish it. The first
iteration is still under construction 


I'm pretty good at working in the abstract, but
nothing tells you more about how something 
works (or doesn't) than working with it. So, I'm doing the dog-fooding, drinking 
your own champaign, getting high on your 
own supply thing. This site is made from
a collection of neopolitan docs run through
a prototype parser. 

Instability and spelling error abound.  
If you're cool with that, have a look
around and let me know what you think 
<<l|2|on mastodon>> or <<l|3|twitter>>

`-a` 




---: WARNING 
:::: :class heads-up

## Update In Progress

I'm changing the directives syntax. Instead of 
`:::: thing:`, they are going to use `--;`.




## Intro

Neopolitan is a plain-text file format. It's 
inspired by Markdown, MDX, and Org-Mode. As great
as those formats are, they don't work for me. 
The have frictions that break my concentration
and knock me out of the flow. 

Being in a state of flow is precious to me.
I've been through some shit that's done the
cliche "making me realize how little
time we have". Having stared down the
abbys, I now do everything I can to attain
and maintain flow states. That includes 
creating a new file format. 



---: HIDDEN 

I've run my site for twenty years. I've 
done half a dozen overhauls that required changing
the way I store content. Thinking forward 
to the next twenty years, I never want to have to do it again.

The fundamental goal of neopolitan is to 
keep me from having to do that while still 
providing a fully featured set of content
options. 


---: CONTENT 


## Overview 


Neopolitan files are made of
sections. Each sections starts with 
`---:` followd by the type of section. For
example:

---: PRE

 ---: CONTENT 

---: CONTENT 

### Processing

Each type of section has a distince set of rules 
for how to process what's inside it. For example, 
<<code|---: CONTENT|neo>> sections look a lot like 
markdown. This:



---: HIDDEN

Hi! Welcome to a hidden note. You're seeing
this in the source, but the parser skips
it when generating the output. 

I find being able to add personal notes
inilne is super handy. 


---: HIDDEN 

Here's an actual note-to-self:

Note that right now the lines in the next
PRE section are spaced over one. That's 
because the functonality to embed section
header in PRE sections hasn't been 
implemented yet. 

Also, There's a lot going on with the 
duplication of content and example headers. 
Files without so much meta examination 
don't look as cluttered. 

Being able to add as much space as you 
want between sections helps with that 
thought



---: PRE 

 ---: CONTENT

 ## Small Example Header

 Here's a list

 - It's easy to tell the depth of a well.

 - Two blue fish swam in the tank.

 And one with numbers

 1. Cut the pie into large parts.

 2. The pencils have all been used.

---: CONTENT

Turns into this:

---: EXAMPLE

#### Small Example Header

Here's a list

- It's easy to tell the depth of a well.

- Two blue fish swam in the tank.

And one with numbers

1. Cut the pie into large parts.

2. The pencils have all been used.

---: CONTENT

### More Stuff

neopolitan offers an expanded set of options 
with the basic processing. For example, 
detail lists. 

---: PRE

~ Alfa

: The office paint was a dull sad tan.

~ Bravo

: We admire and love a good cook.

: Ducks fly north but lack a compass.

---: CONTENT

Becomes

---: EXAMPLE

~ Alfa

: The office paint was a dull sad tan.

~ Bravo

: We admire and love a good cook.

: Ducks fly north but lack a compass.


---: CONTENT


The display for the examples is done with 
section headers too, along with some other
standard types. This:

---: PRE

  ---: NOTE

  This is a note

  ---: EXAMPLE

  This is an example 

  ---: WARNING

  This is a warning 


---: CONTENT

Produces this:


---: NOTE

This is a note

---: EXAMPLE

This is an example 

---: WARNING

This is a warning 

---: CONTENT

There is also a `---: DIV` which you can add
classes to like this:

---: PRE

  ---: DIV
  :::: :class alpha bravo

  hotel foxtrot

---: CONTENT 

Outputs the HTML:


---: EXAMPLE

<div class="alpha bravo neo-div">hotel foxtrot</div>


---: CONTENT

The `neo-div` is a class that's added automaticaly
to various tags generated by neopolitan. They
all start with `neo-` as a type of namespace. 

More than classes can be added to. Any number
of arbitraty attirbutes can be added with this
format:


---: PRE

  ---: PRE
  :::: :id alpha 
  :::: :class bravo 
  :::: :data-key delta echo

---: CONTENT 

That will output:

---: EXAMPLE

<div 
  id="alpha"
  class="bravo neo-div" 
  data-key="delta echo"
  >

---: CONTENT 


There's other things too that I'm still 
getting put togehter. 


- `:::: type:` style directives (where the
colon is on the right side of the word instead
of the left. 

- `<<` format for links, code, spans, and tags

- JSON metadata containers 

- WIDGETS (which are really just JSON blobs
with `:::: type:` directives)

I'll post updates on <<l|2|mastodon>> and <<l|3|twitter>>
if you want to follow along.








---: HIDDEN



I'm currnetly in the proces of going <<l|1|MDN's full list of elements>>









---: TODO

[] Come up with a way to have `---:` strings at 
the start of lines in `---: PRE` sections. 
Thinking a directive in the opening section header
that can identfy the string you want to use for
a closing item. That way the system doesn't have
to try to come up with something. it just uses
whatever the author puts in. 
















## Some Details

neopolitan will be open-source as soon 
as I figure out which license to use. 

The source code is at <<l|https://github.com/alanwsmith/neopolitan>>

That repo is only the spec. I'm specificlly keeping
implemtations out of the repo. What is in the
repo is a set of tests to verify implementations. 

If you're interpreter takes the input and produces
the output, you're good to go. I know there's 
all kinds of stuff that goes into a formal spec. 
Creating that is not a skillset I currenlyt have
and I'm ready to build buildin on my personal site. 

I'm making this site, and redoing my personal 
site. The process of building those is what I'll
use to finalize the first version of the format. 

I'll add a bunch of documentation, but the real
test will be the interpreter passing the test. 



Here's an initial implementatio I'm working on. 

https://github.com/alanwsmith/neopolitan-py

---: TODO

[] Link up the validaiton tests

[] Move most of this content to a secondary about 
page and put examples here. 

[] Write up "Why not Markdown"

[] Write up "Why not MDX"

[] Write up "Why not Org Mode"

[] Write up "Why not format X"



Scratch line:

From `Learning Perl`: Making Easy Things Easy and Hard Things Possible




---: LINKS

[
  {
    "href": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element"
  },
  {
  "href": "https://hachyderm.io/web/@TheIdOfAlan"
},

  {
  "href": "https://twitter.com/TheIdOfAlan"
}

]
  


