-> title

Neopoliltan Philosophies


-> note

These are very much draft notes on the 
thoughts, influences, and decisions behind
Neopolitan's design. Things will get added
deleted and changed as development continues. 

-> h2

The Philosophies

In no particular order...



-> h3

HTML Focused

My primary output target is HTML. Most HTML
tags have native counterparts to support that. 
If a tool doesn't support a thing that thing doesn't
get used. I'm working to include a wide set
to give us more things to play with. 

-> h3

Footnotes And References

Use the first line after them as the name
which is what's tied into the key from the
content. (e.g. `>> Some Name`` connects to
`<<^ Some Name >>`. 

Surrounding white space is trimmed. 

Internal spaces are allowed but must match
as the value is used as a direct key. 


-> h3

Whitespace Is Insignificant

It doesn't matter in most places except for
blank lines that act as separators between
sections and items

-> h3

No Form Section

I was considering a `-> form`` section
but decided against it. Better to just
roll out to an `-> html` section for that
based of the complexity. 

-> h3

Sections For Styling

Several sections (like `-> note`` and `-> 
notes``) are simply alternate versions of other 
sections (paragraphs and lists for example). 
The intent it to provide different element
types to make them easier to categorize
and style

-> h3

Only One Style For Attributes

I considered two types of attributes for
sections. One that would go directly into
the HTML and one that was for directives
that would only be used for processing. 

For example, instead of:

-> startcode

-> code
>> rust
>> class: alfa

-> endcode

-> p

The `rust`` line would get a separate 
starting token indicating that that 
string wouldn't go directly to the output
but was a processor instruction (which
would let it know to add `language-rust``
to the HTML attribute list).

It would have looked something like this:

-> startcode

-> code
++ rust
>> class: alfa

-> endcode

-> p

I decided against that because it would
require remembering which things were
directives and which weren't. 

For my implementation, it's the 
responsibility of the processor to make
the determination. 


-> h3

Minijinja Templates

I'm using Minijinja for the template 
engine. This is an implementation 
detail that isn't required. 

I'm also using the `.jinja`` file
extension instead of `.html``. I'm
going with that because my auto-formatter
kepts messing with the templates in a way
that altered the spacing. 

I haven't found a maintained jinja
extension for neovim tree-sitter. Something
to add to the list. 


-> h3

Convenience Sections

Several sections exist purely for convenience. For
example, it wouldn't be that hard to make
a `-> div`` section with a `>> class: warning`` 
on it, but I do that so often it's nicer to 
have a `-> warning`` section.

This also goes for sections that are nothing
more than aliases for standard HTML tags. For
example, adding a `<textarea>`` with any necessary
attributes is not much more work than making
a `-> textarea`` section. But, the section keeps
the look consistent with the rest of the page
and I think it looks nicer than that HTML tag.

-> h3

Either HTML or Neopolitan

You can't put HTML in any section other
than an `-> html`neo` section and have it work. 
That prevents issues with escaping and parsing 
characters that are meaningful in HTML (e.g. 
trying to determine if a <<<|kbd>> is a literal
character or the start of an HTML tag. 

Most HTML tags have neopolitan tags mapped 
to them. Anything that doesn't or needs more
nuance can be handled with an `-> html`neo`
section. 

If you're trying to do something that that
doesn't handle, you're beyond the scope
of the format. 

-> h3

Unix Like Process Call Outs

Provide a section to call out to other 
processes to load JSON and serialize
it in. 

Also provide processes that return
neopolitan content prior to parsing
the document. And ones that return
straight HTML


-> h3

Multiple Sites

There is only one set of content but 
it can go to multiple sites via a
`site`` or `sites`` attribute. (where
`sites`` can got to multiple output
sites. 

Content will go to a `sites/default`
directory if no `site`` or `sites``
attribute is found. 

I set it up this way because I have
multiple sites and edit content
in a single location via my Grimoire. 

While the directory structure for
the content gets mapped to the output
files there isn't a level to determine
the site. That's only done by the 
attributes. 


-> attributes
>> date: 2023-04-14 14:39:42
>> id: 2oqfas7uyfv8
>> type: default 
>> published: y

