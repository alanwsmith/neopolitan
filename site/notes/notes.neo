---: CONTENT

# Neopolitan Notes




## Examples

### Headers

Headers are made with between one and six 
*#* characters that map to `<h1>` to
`<h6>`

---: TEXT

---
- <<text
---

---: TEXT


- <<code

- <<text|&#39;|>>

- <<text|&#39;|:class something|>>

- *<<text|&#39;|>>






---: NOTES

- If you need to but < or > in code see if you need
to add a | 

- Setup: 

<<span|some text|:id some-id|:class some classes|>>

- Make closing `>>` tags allow an optional `|`
or should that be mandatory? Feels like maybe so 
that it's explicit and consistent

- definitely make `` work


---: CONTENT

## Tags

- div 

- code

- span

<<div|this is some text|:id some-id|>>

<<div|this is some text|:id some-id>>

For div span and code, any following item that starts with
a `:` will turn into an attribute for the opening tag. 

Stuff without the `:` is not part of the spec but 
can be used in whatever way the implementaiton wants. 





---: CONTENT

And single lines like this.

## Formatting

Headers are marked with between 1-6 <<code|#>>
characters at the start of a line.

There is <<text|*|strong>>*bold*<<text|*|strong>>



There is <<text|*|strong|>>*bold*<<text|*|strong|>>


TODO: Figure out is <<<text|tree>>> works for a way
to pass things through so you can see them 



Content in hidden sections isn't output. 



_



,---: DESCRIPTIONS
:::: :class desription-example

- open with a dash

the description itself follows

- an important detail
is that

both the initail text and the full
defintion can be on multiple lines

- the *can* <<link|0|link>>

in _both_ the initial and 
<<link|0|lower levels>>

You can also have multipe paragraphs
in a description like this one. 





An characters that you don't want to get converted go in
<<code|text>> tags <<text|*>>

<<span|this is some stuff that will have a span on it|


---: QUOTE

This is a multiline block quote. 

With <<link|0|links>> and 
<<code|print('code')|python>>




---: TODO

[] Figure out tables

[] Add escaping to pipes in double tags

[x] Add description lists

[] Also test todos
that move to multiple lines

And multipe paragraphs


---: CONTENT

TODOs and other blocks are stopped when
another <<code|---:>> marker shows up. 

Moving between any type of block is possible. 

CONTENT is the one to default to. 


---: DIV
:::: :id main-references
:::: :class references

### div wrappers

divs with distint attributes can be added 
at any locaiton that wrap content. They are 
processed like normal content. 

- <<link|0|alpha>> - the quick brown fox

- <<link|0|bravo>> - the quick brown fox


---: CONTENT

## Links

SHould links have attributes in the tags or should
those be stored in the metadata... feels like it's 
nicerer to have them up top. So, make them both 
an option. 

<<link|1|basic link|>>

<<link|1|link with " and < and >|>>

<<link|1|link that
breaks lines|>>

<<link|1|extra attributes|:id some-id|:class some class|>>

<<link|1|atts break lines|:id
link-jump-line|>>


---: CONTENT

Consider how to do things like 

```html
<a href="/en-US/docs/Web/HTML/Element/blockquote">
<cite>MDN blockquote page</cite></a>
```

And other nestings, like `code` inside `strong`

Maybe that just goes back to HTML?

Could do `+` and `-` to put tags inside and out

```
<<link|1|the text|:class something|+strong>>
```

Feels like that would be better off being 
addressed by an id or class. Thinking
the gain for trying to nest would be 
minimal compared to the effort and 
complexity involved. 

Figure out if you want to make
`---: TABLE` be a header or just
something in the content. I think
probably it should be a header
so attributes can be applied to
it. 

- section headers are always 
  UPPERCASE and only 1 word/string

- Maybe make links JSON all the time. 
Let widgets be whatever they want. 
That way there isn't a burden on 
other languates to try to parse javascript
(unless that turns out to be trivial)






---: TODO

This is the list of all the tags to consider for
inclusion. Not all of them will be used. This is
focused on content and not metadata (which) is 
contained in the ---: CONFIG json 

[] address
[] article
[] aside
[] footer
[] header
[] h1-h6
[] main
[] nav
[] section
[] blockquote
[] dd
[] div
[] dl
[] dt
[] hr
[] li
[] figure/figcaption
[x] ol
[x] p
[] pre
[x] ul
[] abbr
[] br
[] cite
[] code
[] data
[] dfn
[] em
[] i
[] kbd
[] a
[] strong
[] bdi
[] bdo
[] mark
[] q
[] ruby
[] rp
[] rt
[] s
[] samp
[] small
[] span
[] strong
[] sub
[] sup
[] time
[] u
[] var
[] wbr
[] area
[] audio
[] img
[] map
[] track
[] video
[] html
[] base
[] head
[] link
[] meta
[] style
[] title
[] body

(Thinking maybe a lot of these are just straight double
less than tags with the name, content and then arguments
and directives passed)

One of the directives that you could use for the 
double lt tags is `~no-escape` or something like that so 
that you can pass already escaped character in

You do want to have the ability to have text above and 
below the notes in the notes section. Probably not
so much with lists. 




[] Description lists
[] TODO Lists
[] ::: :headers - which are attributes that are included
[] ::: ~headers - which are custom thing that can be used by interpreters  
[] Talks with Ben about accessibility 
[] Figure out tables
[] probably directives should be defined for `~` since 
they're being used explicity for sections and possible other things
[] so maybe `::: x-` for custom header payload.
[] Make an explicit `---: CONFIG` section that's a json blog for
whatever folks want to throw in it. 



- Some of these thought conflict. Because I don't want to break 
flow and go find the prior version. They'll be cleaned up
and reconsiled 

- Make white space required between chunks. That is the separator
without it, you don't do things like have a dash that's at the
start of a later line in a paragraph. Something 
- like that. It looks weird in general, but that's still part
of the paragraph.

- Personally I'd move that dash to the preceeding line because
it looks weird. But that's not a requirement. 

- Even without having to make a determination of intent, 
using only empty lines for separators makes the software
less complex. 


- This will probably be split out to content-test.neo for just 
those tests and another document will contain sections. 

Metadata (LINKS, REFERENCES, and WIDGETS) can be called from
external sources via a url or file location. Anything starting
with a `/` slash is a path accessible from the local file system
starting for the root. Anything starting with a `./` dot slash
is a relative path. Everything else needs to be interpreted 
by the parser. (this should cover windows `C:/` when that format
is used, but need to verify)

- Separate out the python code. It is
to be maintained ina separate repo. The idea
is that there's not a reference implementation. 
It only matters if all the test cases pass. 

- The list is setup to allow any number of spaces between the
initial `-` and the text. TODO: Add an explict test for that. 
Also, setup so that all markers have the same behavior.  

- TOOD: Investigate starting ordered lists at different
numbers

Guidelines:

- The goal is to handle the 80/20 of content easily 
and punt the remaining 20% to native code and data
files. 

- remove leading and trailing whitespace from inside 
tags that aren't preformatted.

- white space (including empty lines) is fine between html
output lines. 

- Empty lines are always separators in CONTENT and
other sections that are explicitly formatted. 

- Leading and trailing whitespace is always removed
from sections (todo: determine is there should be
a flat that prevents this? Seems like no since you
could just use PRE. That turns off all formatting
but if you're looking for whitespace that seems
like the right play)

- TODO, Determine if there should be other stuff 
in links besides the attributes in the metadata
feels like yes so you can have one link with 
a url and aria-lable and then style it differntly
in differnt places. 

- Thinking that ":" will always add things
directly to attributes of a tag and `~` is 
a processing instruction for whatever 
implementation is being used. 

- Fiugre out how to do References to other 
content. You'll want that so things 
can be included directly 

- Show an example of using an HTML section
to open a grid, then multiple div sections
then a closing tag in another ---: HTML 
section

- Allow `::: ~header`, `::: ~footer`, 
etc... directives under `---: CONTENT` that
create an opening tag for that type of
content. 

- The `::: ~header` type directives will 
be closed with a `---: END` section with 
the directive for the tag to close (e.g.
`::: ~header`)

- `---: CONTENT` sections can have nothing
in them other than attributes and directives

- Don't make `TEST` part of the foundation. 
Use it as an example of creating custom sections.

- If you want multiple lines in a `dd` you'll have to 
drop in your own tags to make that happen in this
iteration. 

- The `---: DIV` just wraps it stuff in a 
div with whatever headers you pass (or none
if you don't). The internally processing
is the same as `---: CONTENT`


- Widget handling is an implemetiontaion
details. The only spec for widget sections
in the file is that they be valid JSON or
javascript object style format. Maybe
the header could determien the content 
type and directives? 

Something like:

    `---: WIDGET`
    `:::: :type SomeType`
    `:::: :format JSON|JS|Whatever`

Since handling is up th






---: CONTENT




# Neopolitan Reference

This document defines neopolitan transformations. 

This document is maintained with revisions. Any 
parser that produces the same output as the (TKTKTKTK link)
neopolitan-py reference implementation is a valid 
Neopolitan interpreter for that revision. Providing
additional functionality is encouraged. 

Every effort will be made to ensure backward 
compatibility once revision 1 is published. (Preview
revisions before revision 1 will be used to
finalize the first revision in an effort to lock
in its long term stability)

Validation is done via HTML. 

The tests are done by convention. The document 
is split by `---: CONTENT` headers then 
`---: PRE` headers. If there are three
items in the resulting array the values are
run as a test. The target is wrapped in 
`-----------...` lines to control for 
whitespace



---: CONTENT
:::: ~section
:::: :class example

---: NOTE

This is old content that needs to be combined
with the new stuff

---: CONTENT

# Neapolitan Guidelines

## Overview

This document lays out the plain-text format I'm 
using to overhaul my site. Working on my site
is no longer fun. It's a constant struggle against
the opinions of frameworks and the limitations 
of 

This document is to determine the design of the
content that'll be used for the site. I've been
using markdown. It's been solid, but always feels
a little constraining.

Getting out from under those constraints from the
framework side of things is the key reason I'm redoing
the site. I've been using Org Mode and was going to
do a combination of Org Mode and Markdown for the content
but that would keep me locked into those constraints.
They aren't bad, but I want to see what I can do without
them.

So this is where I'm setting up the spec for the format
I'm going to use.

---: TODO

[] Close ordered and unordered lists if they are 
at the end of a section and don't have other lines
behind them

[] Made from something like an unordered list

[] But with a custom div wrapping it for styling

[] Deal with multi line
todos that might
    have indents

[x] Also deal with ones that should be check off

---: HTML

<h3>HTML</h3>

<div>This text is in a div under an <code>#+HTML</code> token</div>

<div class="test-class">
It will be passed straight thru and things like ampersands
(&amp;) won't be modified
</div>

---: CONTENT

This is back to the basic content setup.

Here is a <<link|0|link>>

Things to deal with:

- Unordered Lists

- With stuff in them that is basic

- And catch multiline
  in lists

Also need to do "quotes"

And less than < and  greater than >

Going to to ahead and do the ' single quote too

And the & ampersand

---: WIDGET

{ 
  "id": "prototype-example",
  "type": "prototype-example",
  "words": [
    "Widgets ar defined by JSON in the content",
    "It's up to the processor to handle them"
  ]
}

---: CONTENT

This is an ordered list. 

1. They start with numbers followed by a dot

2. There must be a blank row between the numbers

3. Multiple lines require white space before
    the first character

12. The actual number doesn't matter, they will
    be numbered automatically in the HTML

This line is here because lists don't currently 
close if they are followed by another section 
without some text in between. 

---: NOTES

- Thinking this will be like basic text 
processing, but inside a custom div

- Since so many posts have notes, it seems 
worth it

- Notes can also have links. For example: 
<<link|0|here is my links page>>

- And this is the character check: 
& > < " '

---: HIDDEN

This is an internal note that would be
output. Super handy when you publish 
directly from your notes app, but some 
of the things in there wouldn't make 
sense to anybody else. 


---: CONTENT


Here's a footnote<<footnote|2>>. Implementation 
determines if it's a link or not.


---: DIV 
:::: :class custom-class

This content is wrapped in a div with a custom class.

---: CONTENT 

And we're back to normal with a horizontal rule

---

And the different sized headers:

# H1 Alpha

## H2 Bravo

### H3 Charlie 

#### H4 Delta

##### H5 Echo

###### H6 Foxtrot


---: NOTE

Stand alone notes are a thing. 

They are parsed like regular content. 
The difference is that they have their own
div wrapper which can have attributes applied. 

---: CONTENT


Something else that can go in is Org Mode source blocks


#+begin_src python :results output :wrap example

print('the quick brown fox')

#+end_src

#+RESULTS:
#+begin_example

the quick brown fox

#+end_example

There are also examples that aren't the results of #+begin_src blocks

#+begin_example

Data is here

#+end_example

## Images

Images are done in a similar way to links:

<<image|0>>

But the data for the images is stored in JSON so alt 
text can be applied.

---: DIV

Some Content can go in divs. It's processed
the same as the main content. It simply
wraps the content in a div. 

Not so useful by themselves, but applying
custom headers to them provides the major
potential


---: DIV
:::: :id example-with-id
:::: :class delta-class echo-class 
:::: :data-type supplement attribute example


Then back into a div that has addition attributes 
associated with it.


---: CONTENT

## Inline Code

Maybe something <<code|print('like this')|python>>

There won't be <<code|```>> code fences. Blocks are done 
in <<code|#+begin_src>> blocks. 

First stages, line breaks can't go in inline code.

Code inside double < snippets gets escaped too. 


## Other stuff

Almost forgot *bold* and _italic_ which I know aren't
the preferred names, but it's all I can remember at the 
moment. 

#+begin_html

<p>This is the Org Mode style of adding HTML</p>
<p>It's output directly minus trimming the 
trailing and leading white space.
</p>
<pre><code class="language-text">
So
   You
      Can
         Do
           Code
               In
                 It
</code></pre>


#+end_html

### UL Header Test

- This is testing a UL

- That's followed by a header

### Done With UL Header Test


---: TODO

[] Maybe setup so there doesn't have to be
white space in the lines under ordered and
unordered lists

[] Deal with character escaping inside of
of links

[] Setup ordered and unordered lists so they
can have spaces or not have spaces on the
following lines

[] Remove leading and trailing spaces from
code blocks in output (implementation detail)

[] Setup so you can pass attribute sets
to images

[] Add a way to show doulbe <

[] Handle "`" incline code.




---: FOOTNOTES

1. This is how footnotes will work
2. They can have <<link|3|links>> in them


---: IMAGES

[
  {
    "src": "https://placekitten.com/200/300",
    "alt": "A placeholder that's a kitten"
  }
]


---: LINKS

[
  { 
    "href": "https://links.alanwsmith.com/",
    "aria-label": "Visit my links pages"
  },
  {
    "href": "https://hacking.alanwsmith.com/",
    "aria-label": "An animated gif of hacking"
  },
  {
    "href": "https://pixel-art.alanwsmith.com/",
    "aria-label": "A pixel art page made with not javascript or css"
  }
]




---: META

#+DATE: 2022-11-05 19:15:05
#+BLURB: 
#+UPDATED: 
#+ID: 2h9guejvd7ce
#+CATEGORY: Miscellaneous
#+FACET: 
#+SITE: aws
#+STATUS: pending
#+TYPE: post
#+SHOWDATE: false
#+SCRUBBED_ORG: true
#+CUSTOM_THING: This is metadata that can be used in the output
#+CUSTOM_THING2: But it won't show up in the main HTML output from the post object.



---: CONTENT

# NOTES


These are some general notes to hang onto until 
they file a good home. They are very much still
a draft. 

## Pronouncation 

The first part of the name is pronounced like the 
character Neo in The Matrix. The second half is pronounced
like the second half of neapolitan ice cream. To do, 
come up with the phenetics. 

For capitalizaiotn. The standard is all lowercase. But, 
using a capital letter in headlines, etc... is fine. Do 
whatever you think looks best. 

The short hand term is `neo`, again like the matrix. 

I recognize none of that may stick, but some folks get really
into that stuff and want to know how the creator pronounces
and captializes. So, there ya go. 



---: CONTENT

---: CONTENT

# Usage Guide

- Documents are made up of sections

- Every section starts with a header 
that looks like this:

#+being_src
---: CONTENT
#+end_src

- Headers can have attributes that look
like this:

#+begin_src
---: DIV
:::: :id example-id
:::: :class alpha bravo
#+end_src

- For sections that have opening tags, those
attributes are inserted into the tag:

#+begin_src
<div id="example-id" class="alpha bravo"></div>
#+end_src

- Not all sections having wrapping tags. For 
example the `---: CONTENT` header does not. 

---: TODO

[] Provide a list of standard headers that have
wrapper elements. (starting with DIV, NOTES, UL,
LI, DL. etc...)









