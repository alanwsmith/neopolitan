---: NOTE
:::: :class heads-up

### DRAFT

This site is the home of the neopolitan 
plain-text file format. 

Or, it will be when I finish it. It's currently 
an early work in progress. 

#### Make It Real

I can't work in the abstract. I need something to work on in order to 
make it work. So, I'm doing the dog-fooding, drinking 
your own champaign, getting high on your 
on supply thing. This site is made from
a collection of neopolitan docs run through
a prototype parser. 

It'll be bumpy for a while. 









Everything on this site is a draft. I use
writing and building to figure things out. 
Making this site is how I'm refining the 
format into something I want to use. 

I hope you enjoy seeing the process, 
but nothing here should be considered 
stable. Contrictions are all over the place
too. It's all part of the process. 


---: TITLE 

neopolitan


---: SUBTITLE

neo for short


---: CONTENT

Neopolitan is a plain-text file format. It's 
inspired by Markdown, MDX, and Org-Mode. While 
those formats are all great, each one 
introduced some type of friction into my work. 
I can deal with friction just fine, but, like
everyone, I'm way more productive without
it. 







against shortcoming in the way I want things 
to work<<footnote:>>. 

---: FOOTNOTE

- To be fair, MDX and Org-Mode both allow 
increasing degrees of customization. But 
MDX is tied to JSX components and Org-Mode
requires diggin into lisp. I've done that, 
but I'm way more effifieicne in other 
languages. 



---: CONTENT 

I've run my site for twenty years. I've 
done half a dozen overhauls that required changing
the way I store content. Thinking forward 
to the next twenty years, I never want to have to do it again.

The fundamental goal of neopolitan is to 
keep me from having to do that while still 
providing a fully featured set of content
options. 


### Overview 


Neopolitan files are made of
sections. Each sections starts with 
`---:` followd by the type of section. For
example:




---: CONTENT 

### Processing

Each type of section has a distince set of rules 
for how to process what's inside it. For example, 
<<code|---: CONTENT|neo>> sections are a lot like 
markdown. 


---: HIDDEN

Note that right now the lines in the next
PRE section are spaced over one. That's 
because the functonality to embed section
header in PRE sections hasn't been 
implemented yet. 

Also, There's a lot going on with the 
duplication of content and example headers. 
Files without so much meta examination 
don't look as cluttered. 

Being able to add as much space as you 
want between sections helps with that 
thought





---: CONTENT

This:



---: PRE 

 ---: CONTENT

 ## Small Example Header

 Here's a list

 - It's easy to tell the depth of a well.

 - Two blue fish swam in the tank.

 And one with numbers

 1. Cut the pie into large parts.

 2. The pencils have all been used.

---: CONTENT

Turns into this:

---: EXAMPLE

#### Small Example Header

Here's a list

- It's easy to tell the depth of a well.

- Two blue fish swam in the tank.

And one with numbers

1. Cut the pie into large parts.

2. The pencils have all been used.

---: CONTENT

### More Stuff

neopolitan offers an expanded set of options 
with the basic processing. For example, 
detail lists. 

---: PRE

~ Alfa

: The office paint was a dull sad tan.

~ Bravo

: We admire and love a good cook.

: Ducks fly north but lack a compass.

---: CONTENT

Becomes

---: EXAMPLE

: The office paint was a dull sad tan.

~ Bravo

: We admire and love a good cook.

: Ducks fly north but lack a compass.


---: CONTENT

I'm currnetly in the proces of going <l|1|MDN's full list of elements>>








---: TODO

[] Come up with a way to have `---:` strings at 
the start of lines in `---: PRE` sections. 
Thinking a directive in the opening section header
that can identfy the string you want to use for
a closing item. That way the system doesn't have
to try to come up with something. it just uses
whatever the author puts in. 
















## Some Details

neopolitan will be open-source as soon 
as I figure out which license to use. 

The source code is at <<l|https://github.com/alanwsmith/neopolitan>>

That repo is only the spec. I'm specificlly keeping
implemtations out of the repo. What is in the
repo is a set of tests to verify implementations. 

If you're interpreter takes the input and produces
the output, you're good to go. I know there's 
all kinds of stuff that goes into a formal spec. 
Creating that is not a skillset I currenlyt have
and I'm ready to build buildin on my personal site. 

I'm making this site, and redoing my personal 
site. The process of building those is what I'll
use to finalize the first version of the format. 

I'll add a bunch of documentation, but the real
test will be the interpreter passing the test. 



Here's an initial implementatio I'm working on. 

https://github.com/alanwsmith/neopolitan-py

---: TODO

[] Link up the validaiton tests

[] Move most of this content to a secondary about 
page and put examples here. 

[] Write up "Why not Markdown"

[] Write up "Why not MDX"

[] Write up "Why not Org Mode"

[] Write up "Why not format X"



Scratch line:

From `Learning Perl`: Making Easy Things Easy and Hard Things Possible




---: LINKS

[
  {
    "href": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element"
  }
]
  


