---: CONTENT

# Neopolitan Reference

This document defines neopolitan transformations. 

This document is maintained with revisions. Any 
parser that produces the same output as the (TKTKTKTK link)
neopolitan-py reference implementation is a valid 
Neopolitan interpreter for that revision. Providing
additional functionality is encouraged. 

Every effort will be made to ensure backward 
compatibility once revision 1 is published. (Preview
revisions before revision 1 will be used to
finalize the first revision in an effort to lock
in its long term stability)

Validation is done via HTML. 

The tests are done by convention. The document 
is split by `---: CONTENT` headers then 
`---: PRE` headers. If there are three
items in the resulting array the values are
run as a test. The target is wrapped in 
`-----------...` lines to control for 
whitespace


---: CONTENT

## Single line paragraph

---: PRE

The curtain rose and the show was on.

---: PRE

--------------------------------------------------
<p>The curtain rose and the show was on.</p>
--------------------------------------------------

---: CONTENT
















---: TODO

This is the list of all the tags to consider for
inclusion. Not all of them will be used. This is
focused on content and not metadata (which) is 
contained in the ---: CONFIG json 

[] address
[] article
[] aside
[] footer
[] header
[] h1-h6
[] main
[] nav
[] section
[] blockquote
[] dd
[] div
[] dl
[] dt
[] hr
[] li
[] figure/figcaption
[x] ol
[x] p
[] pre
[x] ul
[] abbr
[] br
[] cite
[] code
[] data
[] dfn
[] em
[] i
[] kbd
[] a
[] strong
[] bdi
[] bdo
[] mark
[] q
[] ruby
[] rp
[] rt
[] s
[] samp
[] small
[] span
[] strong
[] sub
[] sup
[] time
[] u
[] var
[] wbr
[] area
[] audio
[] img
[] map
[] track
[] video
[] html
[] base
[] head
[] link
[] meta
[] style
[] title
[] body

(Thinking maybe a lot of these are just straight double
less than tags with the name, content and then arguments
and directives passed)

One of the directives that you could use for the 
double lt tags is `~no-escape` or something like that so 
that you can pass already escaped character in

You do want to have the ability to have text above and 
below the notes in the notes section. Probably not
so much with lists. 


---: HIDDEN











---: HIDDEN

[] Description lists
[] TODO Lists
[] ::: :headers - which are attributes that are included
[] ::: ~headers - which are custom thing that can be used by interpreters  
[] Talks with Ben about accessibility 
[] Figure out tables
[] probably directives should be defined for `~` since 
they're being used explicity for sections and possible other things
[] so maybe `::: x-` for custom header payload.
[] Make an explicit `---: CONFIG` section that's a json blog for
whatever folks want to throw in it. 


---: HIDDEN

- Some of these thought conflict. Because I don't want to break 
flow and go find the prior version. They'll be cleaned up
and reconsiled 

- Make white space required between chunks. That is the separator
without it, you don't do things like have a dash that's at the
start of a later line in a paragraph. Something 
- like that. It looks weird in general, but that's still part
of the paragraph.

- Personally I'd move that dash to the preceeding line because
it looks weird. But that's not a requirement. 

- Even without having to make a determination of intent, 
using only empty lines for separators makes the software
less complex. 


- This will probably be split out to content-test.neo for just 
those tests and another document will contain sections. 

Metadata (LINKS, REFERENCES, and WIDGETS) can be called from
external sources via a url or file location. Anything starting
with a `/` slash is a path accessible from the local file system
starting for the root. Anything starting with a `./` dot slash
is a relative path. Everything else needs to be interpreted 
by the parser. (this should cover windows `C:/` when that format
is used, but need to verify)

- Separate out the python code. It is
to be maintained ina separate repo. The idea
is that there's not a reference implementation. 
It only matters if all the test cases pass. 

- The list is setup to allow any number of spaces between the
initial `-` and the text. TODO: Add an explict test for that. 
Also, setup so that all markers have the same behavior.  

- TOOD: Investigate starting ordered lists at different
numbers

Guidelines:

- The goal is to handle the 80/20 of content easily 
and punt the remaining 20% to native code and data
files. 

- remove leading and trailing whitespace from inside 
tags that aren't preformatted.

- white space (including empty lines) is fine between html
output lines. 

- Empty lines are always separators in CONTENT and
other sections that are explicitly formatted. 

- Leading and trailing whitespace is always removed
from sections (todo: determine is there should be
a flat that prevents this? Seems like no since you
could just use PRE. That turns off all formatting
but if you're looking for whitespace that seems
like the right play)

- TODO, Determine if there should be other stuff 
in links besides the attributes in the metadata
feels like yes so you can have one link with 
a url and aria-lable and then style it differntly
in differnt places. 

- Thinking that ":" will always add things
directly to attributes of a tag and `~` is 
a processing instruction for whatever 
implementation is being used. 

- Fiugre out how to do References to other 
content. You'll want that so things 
can be included directly 

- Show an example of using an HTML section
to open a grid, then multiple div sections
then a closing tag in another ---: HTML 
section

- Allow `::: ~header`, `::: ~footer`, 
etc... directives under `---: CONTENT` that
create an opening tag for that type of
content. 

- The `::: ~header` type directives will 
be closed with a `---: END` section with 
the directive for the tag to close (e.g.
`::: ~header`)

- `---: CONTENT` sections can have nothing
in them other than attributes and directives

- Don't make `TEST` part of the foundation. 
Use it as an example of creating custom sections.

- If you want multiple lines in a `dd` you'll have to 
drop in your own tags to make that happen in this
iteration. 

- The `---: DIV` just wraps it stuff in a 
div with whatever headers you pass (or none
if you don't). The internally processing
is the same as `---: CONTENT`



---: CONTENT

## Test Cases 

---: TEST


---: TEST

Multi line paragraph

--------------------------------------------------

The birch 
canoe 
slid on the 
smooth planks. 


--------------------------------------------------
<p>The birch canoe slid on the smooth planks.</p>
--------------------------------------------------


---: TEST

Multiple paragraphs

--------------------------------------------------

Glue the sheet to the dark blue 
background. It is easy to tell the depth 
of a well.

Rice is often served in round bowls. The box 
was thrown beside the parked truck. 

The source of the huge river is the clear spring.
The salt breeze came across from the sea.

--------------------------------------------------
<p>Glue the sheet to the dark blue background. It is easy to tell the depth of a well.</p>
<p>Rice is often served in round bowls. The box was thrown beside the parked truck.</p>
<p>The source of the huge river is the clear spring. The salt breeze came across from the sea.</p>
--------------------------------------------------

---: TEST

White space at the end of a paragraph is stripped

--------------------------------------------------

Two blue fish swam in the tank.     

--------------------------------------------------
<p>Two blue fish swam in the tank.</p>
--------------------------------------------------


---: TEST

Properly escape HTML characters

--------------------------------------------------

Checking & ' " < >

--------------------------------------------------
<p>Checking &amp; &#x27; &quot; &lt; &gt;</p>
--------------------------------------------------

---: TEST

Unordered list with one item

--------------------------------------------------

- The colt reared and threw the tall rider. 

--------------------------------------------------
<ul>
<li>The colt reared and threw the tall rider.</li>
</ul>
--------------------------------------------------


---: TEST

Unordered lists with and without spaces and
with mutiple lines with and withone indents
with white space at the end that is removed

--------------------------------------------------

- It snowed, rained, and hailed the same 
morning. Take the winding path to reach 
the lake.    


- The wide road shimmered in the hot sun.
  Lift the square stone over the fence.

- Mesh wire keeps chicks inside. The frosty air 
passed through the coat.

- A saw is a tool used for making boards.   


--------------------------------------------------
<ul>
<li>It snowed, rained, and hailed the same morning. Take the winding path to reach the lake.</li>
<li>The wide road shimmered in the hot sun. Lift the square stone over the fence.</li>
<li>Mesh wire keeps chicks inside. The frosty air passed through the coat.</li>
<li>A saw is a tool used for making boards.</li>
</ul>
--------------------------------------------------


---: TEST

List with dash at the start of a line in the content

--------------------------------------------------

- Use a pencil to write the first draft. A 
- small creek cut across the field.

- The dune rose from the edge of the water. Those 
words were the cue for the actor to leave.

- The ink stain dried on the finished page.


--------------------------------------------------
<ul>
<li>Use a pencil to write the first draft. A - small creek cut across the field.</li>
<li>The dune rose from the edge of the water. Those words were the cue for the actor to leave.</li>
<li>The ink stain dried on the finished page.</li>
</ul>
--------------------------------------------------


---: TEST

Ordered list with one item

--------------------------------------------------

1. The fruit peel was cut in thick slices.   

--------------------------------------------------
<ol>
<li>The fruit peel was cut in thick slices.</li>
</ol>
--------------------------------------------------


---: TEST

Multiple item ordered list and numbers don't matter

--------------------------------------------------

1. There are more than two factors here.
The grass curled around the fence post.

2. Cut the pie into large parts. A wisp 
of cloud hung in the blue air.

3. Oak is strong and 
    also gives shade.

--------------------------------------------------
<ol>
<li>There are more than two factors here. The grass curled around the fence post.</li>
<li>Cut the pie into large parts. A wisp of cloud hung in the blue air.</li>
<li>Oak is strong and also gives shade.</li>
</ol>
--------------------------------------------------

---: TEST

Description List

--------------------------------------------------

~ Alpha

: Split the log with a quick, sharp blow. He 
ordered peach pie with ice cream.

--------------------------------------------------
<dl>
<dt>Alpha</dt>
<dd>Split the log with a quick, sharp blow. He ordered peach pie with ice cream.</dd>
</dl>
--------------------------------------------------



---: TEST

Description List - Multiple Items

--------------------------------------------------

~ Bravo

: Weave the carpet on the right hand side. The 
    cup cracked and spilled its contents.   

~ Charlie 

: Pluck the bright rose without leaves. The 
young kid jumped the rusty gate.


--------------------------------------------------
<dl>
<dt>Bravo</dt>
<dd>Weave the carpet on the right hand side. The cup cracked and spilled its contents.</dd>
<dt>Charlie</dt>
<dd>Pluck the bright rose without leaves. The young kid jumped the rusty gate.</dd>
</dl>
--------------------------------------------------


---: TEST

Description lists with multi paragraph
descriptions. 

--------------------------------------------------

~ Delta

:  Guess the results from the first scores. 

: These thistles bend in a high wind.  


~ Echo

: The spot on the blotter was made by green ink.
The cigar burned a hole in the desk top.


--------------------------------------------------
<dl>
<dt>Delta</dt>
<dd>Guess the results from the first scores.<br /><br />These thistles bend in a high wind.</dd>
<dt>Echo</dt>
<dd>The spot on the blotter was made by green ink. The cigar burned a hole in the desk top.</dd>
</dl>
--------------------------------------------------

















---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------



---: TEST


--------------------------------------------------


--------------------------------------------------

--------------------------------------------------














## Overview

This document contains examples of all features in 
one place. 

## Examples

### Headers

Headers are made with between one and six 
*#* characters that map to `<h1>` to
`<h6>`

---: TEXT

---
- <<text
---

---: TEXT


- <<code

- <<text|&#39;|>>

- <<text|&#39;|:class something|>>

- *<<text|&#39;|>>






---: NOTES

- If you need to but < or > in code see if you need
to add a | 

- Setup: 

<<span|some text|:id some-id|:class some classes|>>

- Make closing `>>` tags allow an optional `|`
or should that be mandatory? Feels like maybe so 
that it's explicit and consistent

- definitely make `` work


---: CONTENT

## Tags

- div 

- code

- span

<<div|this is some text|:id some-id|>>

<<div|this is some text|:id some-id>>

For div span and code, any following item that starts with
a `:` will turn into an attribute for the opening tag. 

Stuff without the `:` is not part of the spec but 
can be used in whatever way the implementaiton wants. 





---: CONTENT

And single lines like this.

## Formatting

Headers are marked with between 1-6 <<code|#>>
characters at the start of a line.

There is <<text|*|strong>>*bold*<<text|*|strong>>



There is <<text|*|strong|>>*bold*<<text|*|strong|>>


TODO: Figure out is <<<text|tree>>> works for a way
to pass things through so you can see them 


---: HIDDEN

Content in hidden sections isn't output. 



_



---: DESCRIPTIONS
:::: :class desription-example

- open with a dash

the description itself follows

- an important detail
is that

both the initail text and the full
defintion can be on multiple lines

- the *can* <<link|0|link>>

in _both_ the initial and 
<<link|0|lower levels>>

You can also have multipe paragraphs
in a description like this one. 





An characters that you don't want to get converted go in
<<code|text>> tags <<text|*>>

<<span|this is some stuff that will have a span on it|


---: QUOTE

This is a multiline block quote. 

With <<link|0|links>> and 
<<code|print('code')|python>>




---: TODO

[] Figure out tables

[] Add escaping to pipes in double tags

[x] Add description lists

[] Also test todos
that move to multiple lines

And multipe paragraphs


---: CONTENT

TODOs and other blocks are stopped when
another <<code|---:>> marker shows up. 

Moving between any type of block is possible. 

CONTENT is the one to default to. 


---: DIV
:::: :id main-references
:::: :class references

### div wrappers

divs with distint attributes can be added 
at any locaiton that wrap content. They are 
processed like normal content. 

- <<link|0|alpha>> - the quick brown fox

- <<link|0|bravo>> - the quick brown fox


---: CONTENT

## Links

SHould links have attributes in the tags or should
those be stored in the metadata... feels like it's 
nicerer to have them up top. So, make them both 
an option. 

<<link|1|basic link|>>

<<link|1|link with " and < and >|>>

<<link|1|link that
breaks lines|>>

<<link|1|extra attributes|:id some-id|:class some class|>>

<<link|1|atts break lines|:id
link-jump-line|>>


