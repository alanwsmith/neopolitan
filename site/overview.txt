-> TITLE

Welcome To Neopolitan 

-> SUBTITLE

A plain-text format for websites

-> H2

Overview

My site is twenty years old. Realizing that, I
started thinking about the next twenty. Something
I'd never done before. It changes a lot. 

Generally speaking, I'll be writing vanilla HTML, 
CSS, and JavaScript. More on that later. For now, 
it's enough to say that, for my personal site, 
frameworks have been a net negative. I'm going
back to the fundamentals. 

Content management caught my attention as well. 
I'm a huge fan of plain-text. Markdown, MDX, 
and Org-Mode all play a part in my system. 
They're solid, but they each cause their own 
type of friction. There are things I'm not 
doing because of them. 

So, I'm making my own format. 

-> H2

Neopolitan Features

Neopolitan is still in it's early stages 
and very much in flux. I'm using it in 
and iterative design style process. That said, 
the basic ideas are pretty well locked in. 

-> ASIDE 
>> class: highlighted

There's a bunch of code samples below that can 
get hard to look at in the raw form if you're not 
familiar with the format. The content above is 
more what my average posts look like. 


-> LIST

- This aim of neopolitan is not to be all things
to all people. It's initial goal is to build
my website. It's open source. I hope folks
find it useful in the future, but I'd 
hold off trying to do anything with it until
I've at least got it in production myself. 

- Neopolitan documents are composed of sections 
that start with a `->`` token followed by 
the name for the type of section. The type of 
section determines how the content is processed. 
For example, a `-> TITLE`` section turns the first
line after it into an `h1`` and the rest of 
the content after it becomes paragraphs.

- Optional attributes an be added to each section. 
via a token with two `>`` directly under the 
opening `->`` line. The `>> class: highlighted`` 
in the `-> ASIDE`` section above is an example. 

- Some sections are for display (like this 
`-> LIST``) while others are for metadata
(like the `-> ATTRIBUTES``, and `-> CATEGORIES`) 
below. 

- Different inline tags are available for links, 
code, spans, quotes, and others that will be 
documented. The tags start with two `<`` and end 
with two `>`` Here's a link as an example:

-> CODE 

<<link|alfa|https://www.example.com/>>

-> LIST

- Links can also use references. This is done using 
some name or number in the tag then adding the
same thing to a `-> LINKS` section somewhere in 
the document. For example:

-> CODE 

<<link|bravo|1>>

-> P

And then in a `-> LINKS` section: 

-> CODE 

1: https://www.example.com

-> LIST 

- Optional attributes can be passed to inline 
tags by separating them with a pipe. For example:

-> CODE 

<<link|charlie|https://www.example.com/|class: primary>>

-> P 

becomes:

-> CODE 

<a href="https://www.example.com/" class="primary">charlie</a>

-> LIST 

- Shorthands using backtics, underscores, etc... are in
progress for code, strong, emphasis, etc... in addition 
to the ability to make them with the inline tags. 

-class: highlight|- Attributes can be applied to individual list 
items by adding a second `-` and putting the attributes inside 
pipes like this one. Multiple pipes work too. 
`-|id: alfa|class: bravo|-`

- Ordered lists have their own `-> OLIST` section type. Dashes
are used instead of numbers to make it easier to move things 
without having to renumber them to look right in the source 
document. (Most processes disregard the numbers, but it 
always bugged my when they weren't right in the source.)

- The start number of an ordered list can be defined with a 
`>> start: #`` attribute. 

- `-> CSS`` sections provide a way to add CSS directly 
to the page. (They are added as the last CSS before the closing 
`</head>``.

- `-> JS`` sections provide a way to inject scripts directly 
into the page. (They are added as the last `<script>`` before 
the closing `</head>``)

- Image handling is a work in progress. 

- Table handling is a work in progress. 



-> CATEGORIES
>> Neopolitan  

-> ATTRIBUTES
>> date: 2023-03-11 13:07:46
>> updated: 2023-03-12 19:23:12
>> id: 2n4twoxoqgi4
>> site: neo 
>> type: post
>> status: published



















-> H2

Inline links

An <<link|inline link|https://www.example.com>>

A <<link|reference link|1>>

A <<link|styled link|2|class: highlight>>

-> LINKS

1: https://www.example.com/

2: https://www.alanwsmith.com/

-> P 

There's no change to the format between full links 
and reference links. Anything that matches a reference 
uses that reference. Otherwise it's put in as is. 

-> H2

Images 

Inline images are done much like links. 

Sample: <<img|1|alt text|class: alfa>>

I expect most of the time they'll be done on their 
own lines, but they can be put directly in text
as shown above. If they are on their own line
they aren't wrapped in a paragraph. They sit
as siblings to the other content. 

-> IMAGES  

1: https://placekitten.com/200/280

-> H2 

Inline Code

Inline code is done with three backticks. The code
itself goes between the first two. Any attributes are
placed between the second and third. Some might have 
special processing (e.g. `lang``), anything that 
doesn't have special processing is passed directly 
to the HTML as attributes. 

Multiple attributes are separated by a `|``. For 
example:

-> CODE 
-> lang: neo 

`print("Hello, World")`lang: python|class: alfa`

-> P

Spaces between the `:`` and value are optional. 

-> H2

Other stuff part 2

-> LIST 

- TODO - for to do lists

- DIV - for div wrappers instead of paragraphs

- HTML - for raw html 

- NOTES - a div wrapper with a `class: notes` 
pre applied 

- FOOTNOTES - auto numbered footnotes that 
link to their corresponding locations in the 
document

- DATA - has as `-> lang: json`` tag. Doesn't 
show up in output. Is added in the document
template directly for use in scripts on the 
page. Need to think some about how this 
will get put in and if there should be more
than one of them. To start with, it'll
just be the one. (should allow for `-> lang
js`` as well. 

- CODE EndOfCode Tags - for the times when 
other headers would otherwise brake a 
code block. 

- CSS - styles that are copied directly to 
the end of the page's style section to set 
things without having to adjust code. 

- BLOCKQUOTE - A blockquote. Maybe with an 
optional attribution. 

- QUOTE - For a quote and an attribution. 

- HIDDEN - Stuff that's in the file that you 
don't want output to the final content. (NOTE:
don't relay on it for anything sensitive. Figure
that at some point something might screw up and
send it out.) Might not even do the field 
since it could lead to that happening. 

- TABLES - still working on how to handle
these. Requirements include the ability to 
style individual cells while still making the 
content readable in the text file. 

- Spans - e.g. `<<span|asdf|class:alfa>>

- CATEGORIES - For identifying categories pages
apply to. 

- Strong and emphasis text - TBD on _text_, /text/
*text* - Thinking I want to have underline as
an option too. (beyond just strong and emphasis)

- DL, DT, and DD - Description lists and items 

- FIGURE and FIGCAPTION - For figures. 

- HR - Horizontal rules (tdb if three dashs (i.e.
`---``) will also make a rule or just be for
visible sectioning. Feels like it make the most
sense to start with the later. 

- <<cite>> - TBD on this one. 

- <<dfn>> - for wrapping a word that's being defined
in a defintion. (See the HTML spec for the example)

- <<kbd>> - Denote text entry. 

- <<mark>> - Represents text which is marked or 
highlighted for reference or notation purposes due to 
the marked passage's relevance in the enclosing context.

- <<ruby>> - TBD on this one. Need to play with it 
some. The MDN docs say: Represents small annotations 
that are rendered above, below, or next to base text, 
usually used for showing the pronunciation of East Asian 
characters. It can also be used for annotating other kinds 
of text, but this usage is less common. Might be something
cool to do with it beyond the East Asian characters. 

- <<s>> - Strikethru. (Could also do `-stirkethru-``). 
Probably should be both. So you cany style it as well
if you want. Note that you'd want to be able to nest
strong, underline, emphasis and strike through both with
the text shorthand and with the tags. 

- RESULT - the resul of a code run. (Should probably be
rendred in a `<samp>`lang:html` tag. 

- <<sub>> - Specifies inline text which should 
be displayed as subscript for solely typographical reasons. 
Subscripts are typically rendered with a lowered baseline using 
smaller text.

- <<sup>> - Specifies inline text which is to be 
displayed as superscript for solely typographical reasons. 
Superscripts are usually rendered with a raised baseline using 
smaller text.

- <<var>> - Represents the name of a variable in 
a mathematical expression or a programming context. It's 
typically presented using an italicized version of the 
current typeface, although that behavior is browser-dependent.

- TODO: Look at the rest of these: 
https://developer.mozilla.org/en-US/docs/Web/HTML/Element
