---: NOTE

NOTE: Not all the content on this page
is visible yet. Features are still being
added that are necessary for everything
to show up. 


---: TITLE 

Considerations


---: CONTENT

Ingest the title into the metadata
automaticcally? seems like a good idea. 
not sure if that's spec or implemenation. 



---: CONTENT

Maybe add a backtic format with three
tics. where the last you can 
put the language and attributes in the
secont section? Probably be issues 
with parsing though which would lead
to a not great experience. So, 
een though that would be alittle faster
probalby not. (there would be some ways
to make the parsing easlier like requireing
all undersacores, but that would add
complexity in a way that means there's 
no reason not to use the neotags directly




---



### Headers

I'm liking the idea that the functionaly
of headers is determined by which side
the colons are on: 

This is an attribute: <<code:

:::: :class 

>>

TODO: Figure out what do di with wrapps
liek that where it goes across multple
lines
. 

### neotag formats

- The default tags will be defined but, 
as with the rest of the format, they are
extensible for custom implenentations. 
The structure of the tags is as follows:

- always start and with `<<` followed by
a string of one or more lower case letters. 

- the string of letters is terminated by
either a `|` or `:` character. Both operate
the same way. The reason there are two is 
to pick the one that doesn't need escaping
to keep the content more readable. (escaping
is possible too, see below)

- The payload that follows the delimeter 
varies based on the tag type. For example, 
the base tag to wrap inline code has two, 
parts, the `c` tag identifier and the code
to be wrapper. For example, 


---: CODE
:::: type: python 

<<code:hello world>>


---: CONTENT

Other tags require more. For example, the
link tag which take a minimum of a
reference ID and the text for the link
itself. 

---: PRE

<<link:1:click here>>

---: CONTENT

In cases where there is more than two 
string, the same delimetered (i.e. `|`
or `:`) that is used as the initail
separator is used for the reaming 
points of demarcation. 









- there is no requirement for whitespace
to preceed the opening `<<` characters 


- There are aliases for the different 
tag types (or, there will be when they are
speced) For example, (`<<l` and `<<link` 
are both for links. Might add `<<a` if it
doesn't conflict with something else.







These lists contain three types of items
to consider for implementation: probably, 
maybe, probably not. Those titles represent
the likelyhood when I last considered them. 
Things will migrate over time. 


---: TODO
:::: ~title: Probably 

[] Thinking a `---: TITLE` would be good
because it would make it easy to target
and use it automatically. - Could always use
meta date to change things up. but the idea
is to make as few thing have to happen as
possible and to elmiate as much  duplicate
as possilbe. 

[] Figure out if nesting of tags should be
possilbe. Initail instinct is now. Feels 
like that would add a lot of complexity. 
Better to just apply classes or break out
to html. 

[] Figure out if a `<<html` tag makes
sense for droppinginline HTML. Feels
like maybe. and maybe even probably.


[] Add `~title` directive to `TODO` sections
(like this one) that changes the title from
todo to whatever the text is. 

[] Add `~no-title~ directive to `TODO` sections 

[] Multi-line TODO lists.

[] HTML content directly in unordered lists
(e.g. with a `-h`)

[] HTML contend directly in other <<code|<li>|html>>, 
<<code|<dt>|html>>, and <<code|<dd>|html>> elements
with `1.h` style flags. 

[] Nested lists of the same type (e.g. uls in 
uls.)

[] Next lists of different types (e.g. uls inside 
dds)

[] Should part of the requirement be that a JSON
blob with content and metadata is made available?
Not sure how that would work or if that gets
too far into implementaiton. But that could
be an output? Probalby a later phase if it happens
at all and feel like likely just an implementation
specific thing. 

[] Should there be a way to feed it templates
and have its response be the full thing? At the
high level getting the final output is the goal
but should this make that happen as part of the
spec? Well, now that I think about it, the spec
is just the format. Except, of course, that it's
also the output.... So... thinking to be done
here. - Getting into the template world feels 
a bit fraught. Could probably pull an 80/20
but once you start down the path the kibble is
gonna start. 

[] Setup so you can start ordered list number
at something other than 1. 

[] Mandate WIDGET, META, etc... be JSON? Was 
thinking you could flag for a different data
type like `.js` so you could use that style
notation for objects, but that feels like 
maybe adding cruft. Also, that would make it
harder for other processors to deal with 
which would mean lock-in. So, no on that. 
Custom section types can do whatever they
want, but the standards will only be 
valid if they use JSON. 

[] Add `+` as the follow on character for 
lists where you're adding lines. Could
look at doing that for dl/dt/dd as well 
so it's consistem (`~` is the dt and any
number of `+` are the dds)

[] Shold there be ingestion? if so, what 
does it look like?

[] Should there be includes? if so, 
what should they look like?












