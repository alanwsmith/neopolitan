<h1>Vanilla Redesign Content Example</h1>
<h2>Overview</h2>
<p>This document is to determine the design of the content that&#39;ll be used for the site. I&#39;ve been using markdown. It&#39;s been solid, but always feels a little constraining.</p>
<p>Getting out from under those constraints from the framework side of things is the key reason I&#39;m redoing the site. I&#39;ve been using Org Mode and was going to do a combination of Org Mode and Markdown for the content but that would keep me locked into those constraints. They aren&#39;t bad, but I want to see what I can do without them.</p>
<p>So this is where I&#39;m setting up the spec for the format I&#39;m going to use.</p>
<div class="todo-list">
<h3 class="todo-list__header">TODO:</h3>
<ul class="todo-list__list">
<li class="todo-list__item-not-done">Close ordered and unordered lists if they are at the end of a section and don't have other lines behind them</li>
<li class="todo-list__item-not-done">Made from something like an unordered list</li>
<li class="todo-list__item-not-done">But with a custom div wrapping it for styling</li>
<li class="todo-list__item-not-done">Deal with multi line todos that might have indents</li>
<li class="todo-list__item-done">Also deal with ones that should be check off</li>
</ul>
</div>

<h3>HTML</h3>

<div>This text is in a div under an <code>#+HTML</code> token</div>

<div class="test-class">
It will be passed straight thru and things like ampersands
(&amp;) won't be modified
</div>


<p>This is back to the basic content setup.</p>
<p>Here is a <a href="https://links.alanwsmith.com/" aria-label="Visit my links pages">link</a></p>
<p>Things to deal with:</p>
<ul>
<li>Unordered Lists</li>
<li>With stuff in them that is basic</li>
<li>And catch multiline in lists</li>
</ul>
<p>Also need to do &quot;quotes&quot;</p>
<p>And less than &lt; and  greater than &gt;</p>
<p>Going to to ahead and do the &#39; single quote too</p>
<p>And the &amp; ampersand</p>
<details id="widget-example">
<summary>Widget Example</summary>
<ul>
<li>Widgets are defined by JSON in the content</li>
<li>It's up to the processor to handle them</li>
</ul>
</details>
<p>This is an ordered list.</p>
<ol>
<li>They start with numbers followed by a dot</li>
<li>There must be a blank row between the numbers</li>
<li>Multiple lines require white space before the first character</li>
<li>The actual number doesn&#39;t matter, they will be numbered automatically in the HTML</li>
</ol>
<p>This line is here because lists don&#39;t currently close if they are followed by another section without some text in between.</p>
<ul class="notes">
<li class="notes__note">Thinking this will be like basic text processing, but inside a custom div</li>
<li class="notes__note">Since so many posts have notes, it seems worth it</li>
<li class="notes__note">Notes can also have links. For example: <a href="https://links.alanwsmith.com/" aria-label="Visit my links pages">here is my links page</a></li>
<li class="notes__note">And this is the character check: &amp; &gt; &lt; &quot; &#39;</li>
</ul>
<p>Here&#39;s a footnote<sup>2</sup>. Implementation determines if it&#39;s a link or not.</p>
<div class="custom-class">
<p>This content is wrapped in a div with a custom class.</p>
</div>
<p>And we&#39;re back to normal with a horizontal rule</p>
<hr />
<p>And the different sized headers:</p>
<h1>H1 Alpha</h1>
<h2>H2 Bravo</h2>
<h3>H3 Charlie</h3>
<h4>H4 Delta</h4>
<h5>H5 Echo</h5>
<h6>H6 Foxtrot</h6>
<p>Something else that can go in is Org Mode source blocks</p>
<pre><code class="language-python">

print('the quick brown fox')

</code></pre>
<h6 class="code-results">Results</h6>
<pre><code class="language-txt">

the quick brown fox

</code></pre>
<p>There are also examples that aren&#39;t the results of #+begin_src blocks</p>
<pre><code class="language-txt">

Data is here

</code></pre>
<h2>Images</h2>
<p>Images are done in a similar way to links:</p>
<img class="post-image" src="https://placekitten.com/200/300" alt="A placeholder that&#39;s a kitten" />

<p>But the data for the images is stored in JSON so alt text can be applied.</p>
<div>
<p>Some Content can go in divs. It&#39;s processed the same as the main content. It simply wraps the content in a div.</p>
<p>Not so useful by themselves, but applying custom headers to them provides the major potential</p>
</div>
<div id="example-with-id" class="delta-class echo-class" data-type="supplement attribute example">
<p>Then back into a div that has addition attributes associated with it.</p>
</div>
<h2>Inline Code</h2>
<p>Maybe something <code class="language-python">print(&#39;like this&#39;)</code></p>
<p>There won&#39;t be <code>```</code> code fences. Blocks are done in <code>#+begin_src</code> blocks.</p>
<p>First stages, line breaks can&#39;t go in inline code.</p>
<p>Code inside double &lt; snippets gets escaped too.</p>
<h2>Other stuff</h2>
<p>Almost forgot <strong>bold</strong> and <em>italic<em> which I know aren&#39;t the preferred names, but it&#39;s all I can remember at the moment.</p>
<div class="post-footnotes">
<h4 class="post-footnotes__header">Footnotes</h4>
<ul class="post-footnotes-list">
<li class="post-footnotes-list__item">This is how footnotes will work</li>
<li class="post-footnotes-list__item">They can have <a href="https://hacking.alanwsmith.com" aria-label="An hacking animated gif">links</a> in them</li>
</ul>
</div>

