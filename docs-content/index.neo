-- title

Welcome to Neopolitan

-- h2

Introduction

Neopolitan is a plain-text file format designed to making web sites. 
It's like Markdown, but with more features. 

-- h2

Work-In-Progress

<div class="tmp-warning">

<strong>Head's up:</strong> I'm in the middle of rebuilding the site. 

The examples on this page are up to date. Most
of the rest of the site is just scratch notes and 
TODOs. Feel free to click around if you want to see how the 
sausage is being made. 

Follow me on 
<a href="https://hachyderm.io/deck/@TheIdOfAlan">Mastodon</a> 
or <a href="https://bsky.app/profile/alanwsmith.com">Bluesky</a>
for updates. 

</div>

-- h2

How It Works

-- h3

The Basics

Neopolitan documents are made from sections. Each one
start with two dashes followed by a name. For example: 

<div class="tmp-example">

&#45;&#45; title

A Basic Example

This is an example of what a Neopolitan<br />
document looks like.

</div>

which outputs this HTML:


<div class="tmp-example">

&lt;h1 class=&quot;title&quot;&gt;<br />
&nbsp;&nbsp;A Basic Example<br />
&lt;/h1&gt;<br />
&lt;p&gt;<br />
&nbsp;&nbsp;This is an example of what a<br />
&nbsp;&nbsp;Neopolitan document looks like.<br />
&lt;/p&gt;

</div>



-- h3

Section Flags

Each section can have flags. They're
defined by adding lines starting
with two dashes immediately
follow the section like this:

<div class="tmp-example">

&#45;&#45; h2<br />
&#45;&#45; hidden 

This H2 is hidden

</div>

Which outputs:

<div class="tmp-example">

&lt;h2 hidden&gt;<br />
&nbsp;&nbsp;This H2 is hidden<br />
&lt;/h2&gt;

</div>



-- h3

Section Attributes

Key/value attributes can be added as
well. For example:


<div class="tmp-example">

&#45;&#45; h2<br />
&#45;&#45; class: red 

This H2 is red 

</div>

Which produces:

<div class="tmp-example">

&lt;h2 class=&quot;red&quot;&gt;<br />
&nbsp;&nbsp;This H2 is red<br />
&lt;/h2&gt;

</div>


-- h2

Markdown Section Comparison

A basic Markdown document might look like this:


<div class="tmp-example">

&#35; The Title

Some text.

&#35;&#35; Forward

More text.

</div>

A corresponding Neopolitan document 
would look like this:

<div class="tmp-example">

&#45;&#45; h1

The Title

Some text.

&#45;&#45; h2

Forward

More text.

</div>

Each would produce:

<div class="tmp-example">

&lt;h1&gt;The Title&lt;/h1&gt;<br />
&lt;p&gt;Some Text.&lt;/p&gt;<br />
&lt;h2&gt;Forward&lt;/h2&gt;<br />
&lt;p&gt;More Text.&lt;/p&gt;

</div>

Neopolitan takes more lines to produce 
the same output. It provides no benefit if 
that's all you need. 

-- h2

Neopolitan Benefits

Neopolitan's usefulness comes
from adding HTML features
to content<sup>1</sup>. 

For example, changing the above
demo to use explicit sections
and attributes like this:

<div class="tmp-example">

&#45;&#45; title

The &#64;&#64;Title&#124;class: red&#64;&#64;

Some text.

&#45;&#45; forward<br />
&#45;&#45; class: blue<br />

More text.

</div>

produces this:

<div class="tmp-example">

&lt;h1 class=&quot;title&quot; aria-label=&quot;Page Title&quot;&gt;<br />
&nbsp;&nbsp;The &lt;span class=&quot;red&quot;&gt;Title&lt;/span&gt;<br />
&lt;/h1&gt;<br />
&lt;p&gt;Some Text.&lt;/p&gt;<br />
&lt;h2 class=&quot;forward blue&quot;&gt;<br />
&nbsp;&nbsp;Forward<br />
&lt;/h2&gt;<br />
&lt;p&gt;More Text.&lt;/p&gt;

</div>

Specifically, it does the following:

<ul class="flow">
  <li>
    Automatically add the &quot;title&quot; class 
    to the &quot;h1&quot; element
  </li>
  <li>
    Automatically add an &quot;aria-label&quot; to
    the &quot;h1&quot; element<sup>2</sup>
  </li>
  <li>
    Use a span to add a &quot;red&quot; class to the
    word Title in the H1. This is done with the &quot;&#64;&#64;&quot;
    shorthand which is described further below. 
    The key point for this example 
    is the ability to add styles inside headlines. 
  </li>
  <li>
    Output an H2 with the &quot;Forward&quot; text in
    it without having to write the word in addition 
    to using it as the section name<sup>3</sup>.
  </li>
  <li>
    Automatically add the &quot;forward&quot; class
    to the H2 
  </li>
  <li>
    Append the &quot;blue&quot; class to the H2 
    via the &quot;&#45;&#45; class: blue&quot;
    section attribute
  </li>
</ul>

Of course, the same output could be produced with
Markdown. It would require falling back to
raw HTML for most of it, though.

-- h2

Shorthand Spans

TODO: Overview of shorthand spans

-- h2

Tag Spans

TODO: Overview of tag spans


<h2>Footnotes</h2>

<ol class="flow">
  <li>
    Sure, you could always roll back to 
    using HTML directly in your Markdown
    documents. 
  </li>
  <li>
    Adding the &quot;aria-label&quot; is a bit of
    a contrived example. I don't know if including
    one in an H1 is advisable. The point here is
    not about the specific label. It's about
    the general ability to add things like 
    aria labels during output without having to 
    define them directly in the content itself.
  </li>
  <li>
    <p>
      The names don't have to match. You could just
      as easily make a section called &quot;&#45;&#45; week&quot;
      and have the output be &quot;The Week In Review&quot;.
    </p>
    <p>
      There's also no restriction limiting the output 
      to an H2 tag. An entire structure of divs could
      be used the same way.
    </p>
  </li>
</ol>













Section Attribute Example







&#45;&#45; footnote<br />
&#45;&#45; id: 1

This is an example footnote. They
are linked to the content in the document
by matching the <code>&#45;&#45; id</code>
attribute of the section to the
corresponding 
<code>&#94;&#94;ID&#94;&#94;</code>
shorthand in the document. 

<hr />





-- todo

[] Output the contents of the example
below it to show the rendered HTML.

[] Add syntax highlighting.

-- h2

Documentation 


-- h2

Custom Shorthand Tags

Shorthand tags look like

-- code

There are not specified custom tags. Defining
and using them is an implementaiton detail. 
TODO: There are recommended examples in
the reference templates


-- todo

[] Section names for the category types
are reserved words that go to their 
type to ensure that all types
have sections associated with them. 
(That is, it's required to have output
for the section categories. There is
no expectation for what the output
should be. Just that the templates exist)

[] Define the characters that get escaped
when escaping happens. 

[] Create template the outputs the section
for rebuilding sections. 

[] Write up the fact that flags are required
to be output in order for redoing this 
format. Attributes are not required to
be in the same order they showed up in
the source when rebuilding it. 

[] Create a default formatter. Allow
line length to be set. TBD on what
else (aim to keep it at a minimum)

[] Implicit in the specs is the required 
``-- neopolitan`` section which transforms 
the contents without adding anything extra 
to it. Section attributes and flags are ignored. 
This is the only required section. 

[] Make ``-- metadata`` a reserved section name
that should not be output to the page. 
The attrs it has are implementation details. 
Having an metadata section is not required
though. Possible feature for future versions
is to allow JSON or YAML to be used for
the body and pulled in. In that light, 
the ``-- type:`` attribute is a reserved
word. Eventually, will have possible values
of ``neopolitan``, ``json``, ``yaml``.
Other formats TBD.

[] Should there be speced reserved words
for ``-- metadata``? Attrs that aren't 
required but are defined for what
they should be? Probably makes sense
to have ``-- created:``, ``-- updated:``
be defined for the date format to use. 
And, ``-- id:`` as a recommendation for
the ID of page that can be used
for cross references. 


[] Make ``-- template: `` be part of the 
section ref, but not spec. (since
there isn't a defined spec for sections)

[] Make ``-- id: `` and ``-- class: `` be
section ref. 

[] Make ``template:`` be part of the
shorthand ref. 

[] Spec is to fall back to ``<NAME>``
for any ``<<NAME>>`` tag that doesn't
match a template. It's always open
and close. 

[] Reference should include standard
elements for spans. 

[] Reference should include standard
elements for sections. 

[] Provide tests for the reference 
sections and spans for anyone
that wants to implement them to
use them as expanded test for 
other parsers?

[] Version the specs. 

[] Attribute values are only 
text spans and escaped characters? 
Or should they be full parsing? TBD
based on test usage. 

[] Image section is not required but
give guidelines about usage (re: alt text
and path handling via flag)

[] The output references should
just be sections, not the full page. 
Should be able to show them in 
the example though. Maybe
those templates are in
a "support" section that's outside
the reference templates. 

[] Note that the specific page
wrapper is more example than 
reference, but the page template
itself is ref. 

-- h2

Possible Command Line Interface

The first 2.0 version will only
create the AST for use inside
rust apps. Long term possibility
of making a command line interface. 

-- todo

[] Make a config loader with
a JSON schema you can pass in. 

[] Output ASTs as JSONs in 
an output dir with the relative
paths of the source files. 

[] Output ASTs as JSONs in
the same directory as the 
source files. 

[] Provide minijinja output
from the command line run.


-- metadata 
-- created: 2025-04-27T20:21:11-04:00
-- updated: 2025-04-27T20:21:11-04:00
-- template: home-page


