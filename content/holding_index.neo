-> title

Welcome To Neopolitan


-> subtitle

a plain-text website format


-> h2

Overview

My site is twenty years old. Realizing that
started me thinking about the next twenty. The 
perspective shift changed the way I think 
making and maintaining sites.

Generally speaking, I'll be writing vanilla HTML,
CSS, and JavaScript. I'll write more about that
elsewhere. For now, it's enough to say frameworks 
have been a net negative for me. I'm bowing out 
of that game.

Content management also caught my attention.
I'm a huge fan of plain-text. My current system
is around nine thousand Markdown, MDX, and Org-Mode
files. They're solid formats, but each causes
its own type of friction. For example, I don't
use description lists because they aren't native 
to the MDX parser I'm using.

So, I'm making my own format.


-> h2

Neopolitan Features

The format is still in its early stages
and very much in flux. That said, the 
basic ideas are mostly in place.


-> aside
>> class: highlighted

There's a bunch of code samples below. The
format is more about text content. Parsing
through collections of short samples took
me a little getting used to.


-> list

- My goal is not to make a document format 
that's all things to all people. It's to make
a format that makes it quick, easy, and 
pleasurable to post on my site. 

- I'm open-sourcing the work and love the idea 
that maybe someday other folks would be 
interested but for now this is more of working 
in public thing than it is trying to launch 
a new format.

- Neopolitan documents are composed of sections
that start with a `->`` token followed by
the name for the type of section. The type of
section determines how the content is processed.
For example, a `-> title`` section turns the first
line after it into an `h1`` and the rest of
the content after it becomes paragraphs.

- Optional attributes an be added to each section.
via a token with two `>`` directly under the
opening `->`` line. The `>> class: highlighted``
in the `-> aside`` section above is an example.

- Some sections are for display (like this
`-> list``) while others are for metadata
(like the `-> attributes``, and `-> categories`)
below.

- Different inline tags are available for links,
code, spans, quotes, etc... The tags start with
two `<`` and end with two `>`` Here's a link as
an example:


-> code
>> neo

<<link|https://www.example.com/|alfa text>>


-> list

- Links can also use references. This is done using
some name or number in the tag then adding the
same thing to a `-> links` section somewhere in
the document. For example:


-> code
>> neo

<<link|1|bravo text>>


-> p

And then in a `-> links` section:


-> code
>> neo

1: https://www.example.com


-> list

- Optional attributes can be passed to inline
tags by separating them with a pipe. For example:


-> code
>> neo

<<link|charlie|https://www.example.com/|class: primary>>


-> p

becomes:


-> code
>> html

<a href="https://www.example.com/" class="primary">charlie</a>


-> list

- Shorthands using backtics, underscores, etc... are in
progress for code, strong, emphasis, etc... in addition
to the ability to make them with the inline tags.

- `-> footnotes` section provide automatic numbering and links
to places in the document marked by `^` characters. Those
locations are numbered and link back in response.

-|class: highlight| Attributes can be applied to individual list
items by adding like on this line. Multiple attributes can
be added like this: `-|id: alfa|class: bravo|-``

- Ordered lists have their own `-> olist` section type. Dashes
are used instead of numbers to make it easier to move things
without having to renumber them to look right in the source
document. (Most processes disregard the numbers, but it
always bugged my when they weren't right in the source.)

- The start number of an ordered list can be defined with a
`>> start: #`` attribute.

- image handling is a work in progress.

- table handling is a work in progress.

- `-> hidden`` for stuff that's in the file that you
don't want output to the final content. (NOTE:
don't rely on it for anything sensitive. Figure
that at some point something might screw up and
send it out.)

- `-> results` - the result of a code run. (Maybe
rendered in a `<samp>`` tag)

-> h2

Next Steps

Most of the above is pretty well defined. The rest of this
below is a little more fluid. Their ideas I expect I'll
get to, but the priority is everything above.

That said, here's what the more complete vision includes.

-> list

- `dlist`` for description lists

- `html`` section provide for raw HTML input

- `div`` sections provide for adding content that's not
wrapped in `<p>`` tags

- `blockquote`` sections for blockquotes.

- `css`` sections provide a way to add CSS directly
to the page. (They are added as the last CSS before the closing
`</head>``.

- `js`` sections provide a way to inject scripts directly
into the page. (They are added as the last `<script>`` before
the closing `</head>``)

- I have an idea for `DATA` sections to house data for
a page, but TBD on that implementation. I need to work
with it first.

- `figure/figcaption` - TBD on these

- `hr` for adding a horizontal rule you can style with
attributes


-> p

That's the basics.

I'll post updates here as I make progress.

You can also follow me on <<link|mastodon|https://hachyderm.io/@TheIdOfAlan>>

And I stream some of the work <<link|on twitch|https://www.twitch.tv/theidofalan>>

Stop by and say hi.

-a


-> categories
>> Neopolitan

-> attributes
>> date: 2023-03-11 13:07:46
>> updated: 2023-03-12 19:23:12
>> id: 2n4twoxoqgi4
>> site: neo
>> type: post
>> status: published


