-> title

Welcome To Neopolitan

-> subtitle

A plain-text format for websites

-> note

NOTE: I'm doing the "launch before you're ready - 
build in public" thing. The ideas are mostly in place
but the content and the demo implementation  
are still in the works. 

-> h2

Introduction

My site is twenty years old. Pondering those decades 
got me thinking about the next two. I find myself asking 
"What do I want to use for the next twenty years?" instead 
of "What do I want to do for my next redesign?" The answers 
are very different.

-> h2

The Format

I've moved my site a half dozen times. Each one
involved a painful content migration. I've gone from 
raw HTML to Perl scripts to Wordpress to PHP with 
various DB schemas to Markdown to MDX to Org-Mode 
to a mix of all of the above.

I want aspects of each of those rolled into a single format. 
And, I don't want to have to change it again. I haven't 
found anything that pulls that off. So, I'm rolling my own
format. It's called Neopolitan. It looks like this:


-> startcode
>> neo

-> title

Welcome To Neopolitan

-> subtitle

A plain-text format for websites

-> note

NOTE: I'm doing the "launch before you're ready - 
build in public" thing. Most of the ideas here are
in place but some content is still a work in progress. 

-> h2

Introduction

My site is twenty years old. Pondering those decades 
got me thinking about the next two. I find myself asking 
"What do I want to use for the next twenty years?" instead 
of "What do I want to do for my next redesign?" The answers 
are very different.

-> attributes
>> date: 2023-04-16 19:06:40
>> id: 2owpsh3a381
>> type: default 
>> published: y

-> endcode


-> h2

Dogfooding

I'm not a particular  fan of the term "dogfooding".
"Drink your own champagne" is worse. Either way, 
that's what I'm doing. This site is built from the 
Neopolitan documents and a site generation tool 
I'm putting together for a demo implementation.

The sample content above is an example. It's what
built the first part of this page.


-> h2

The Specification

I'm still working on how best to spec the format. 
Gotta finish building it first. But, I'm pretty 
sure of one thing: the spec won't include 
output formats. If other formats have 
taught us anything it's that that ways lies 
dragons^xkcd^^. 

-> footnote
>> xkcd
>> title: XKCD - Standards
>> url: https://xkcd.com/927/




-> startneoexample

-> html

<form>
    <label for="name">Enter your name: </label>
    <input type="text" name="name" id="name" required>
</form>

-> endneoexample



-> h2

Meta Content

Section with differen types of metadata are included
as well. For example, `-> attributes`` sections provide 
key/value pairs at the page level to the processing 
engine. The `-> css`` and `-> script`` sections are 
designed to push their content into the head of the 
document.

-> startneoexample

-> css

.highlight {
  background: white;
}

-> endneoexample

-> h2

Inline Tags

Several inline tags are provided for styling, linking, 
etc...

-> startneoexample

-> p

The <<colt|strong>> reared.

-> endneoexample

-> h2

Inline Tag Attributes

Key/value pairs passed to inline tags output
as attributes:

-> startneoexample

-> p

The <<tree top|strike|id: alfa|class: bravo>> waved

-> endneoexample


-> h2

Inline Shorthand

Shorthand versions of `code``, `em``, 
`strong``, and `link`` look like this:

-> startneoexample

-> p

`alfa``

_bravo__

*delta**

>charlie>https://www.example.com/>

-> endneoexample


-> h2

Inline Shorthand Attributes

Attributes can also be added to the shorthand 
tags:


-> startneoexample

-> p

`echo`id: foxtrot|class: highlighted`

-> endneoexample


-> h2

Inline Code Language Shorthand

If a key is passed as the first argument to a 
code shorthand without a value it's treated
as a language and turned into a 
`language-x`html` class in the HTML.


-> startneoexample

-> p

`delta`rust`

`echo`rust|id: sierra`

-> endneoexample

-> warning

NOTE: Adding an explicit `class`` along with
the language currently results in two
`class`` attributes being added to the
output. That is, this would be a problem:

-> startneoexample

-> p

`echo`rust|class: highlighted`

-> endneoexample



-> h2

An AST Not An Output

The HTML outputs shown above are from my processing 
implementation. They're an optional starting point, 
not a spec. Parsing files into the AST is what's
standardized. What you do with it from there is
up to you. 



-> attributes
>> date: 2023-04-16 19:06:40
>> id: 2owpsh3aov3w
>> type: default 
>> published: y


