-> comment

This is the content source file for the neopolitan 
site home page. It's written in the format. The 
output is produced by my example implementation process. 

These two paragraphs won't show up in the final 
HTML beause they're in a comment section. Being
able to use comments is one of the reasons I made
the format. Keep reading below if you're interested
in the rest. (There won't be any other comments
so there won't be any other difference in the text 
if you read this file or the HTML output.)

-> h3

TODOs

-> list

- [] Convert Code to have a RawBlock instead of
Block so now processing is applied.

- [] Setup attributes to have RawBlock




-> title

Welcome To Neopolitan


-> subtitle

A plain-text website format


-> h3

Vimeo Example


-> vimeo
>> 3817271


-> h3

YouTube Example


-> code

\-> youtube
>> 9jlQiHHMlkA

-> youtube
>> 9jlQiHHMlkA


-> note

TODO: HTML escaping is not currently in place


-> note

white space at the end of section tags causes
panics at the moment. 


-> note

This page is an early draft. Some stuff is 
still in flight. 


-> h2

New Item Checklist

These are the steps to add a new section 


-> list

- [] copy `tests/juliette.rs`` to a new file for paragraph 
style

- [] update the content of the test with the new section names 

- [] add the new file name to `tests/mod.rs``

- [] update the test to fail with whatever is under test

- [] copy `sections/p.rs`` or `sections/list.rs`` to the  new name

- [] change the function name in the copied contents

- [] add the new file to `sections/mod.rs``

- [] Add the enum to `sections/section.rs``

- [] Add the nom call to `sections/section.rs``

- [] Add the use::whatever to `sections/section.rs``

- [] Copy the `templates/paragraphs.html` to the new section name

- [] Update the contents. 


-> h2

Introduction

My site is twenty years old. Pondering those decades got 
me thinking about the next two. It's changed my perspective on 
making and maintaining my site. "What foundation do I want 
for the next two decades?" is a very different question from 
"What do I want to do for my next redesign?"

On that time horizon, my thoughts don't go to the tech, they
go to the content.


-> h2

Post Count

I've moved my site a half dozen times. Each one
involved a painful content migration. They're rarely
fun. Even less so with a thousand posts. Or, in my case, 
1,566.

I've gone from raw HTML to Perl scripts to Wordpress to 
PHP with various DB schemas to Markdown to MDX to 
Org-Mode. 

After switching to plain-text with Markdown I'm not
interested in anything else. But, those formats don't 
work for me. I keep running into frictions that
keep me from posting the way I'd like.

So, I'm making my own format. I'm calling it Neopolitan.


-> h2

The Basics

The general idea is to use sections (which start
with a `->`neo` token) to define areas of content. 
The type of section defines how the content inside
it will behave.

These are the section types I'm planning along with 
indications of which ones are already set.


-> list


- [x] aside - The HTML <<link|
<aside>|
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside>> 
tag

- [x] attributes - A collection of key, value metadata pairs for
the page. I use it for the ID, date, status, etc... The 
permitted and parsed values are left as an implementaiton 
detail. My implementation is straight attirbutes like the
rest of the sections but YAML or other formats could
be used with a corresponding implementation engine.

- [x] blockquote - The HTML <<link|
<blockquote>|
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote>>
tag

- [p2] blurb - Not rendered on the page. Used as meta 
data for links into the page. 

- [p2] button - TBD on this one

- [p2] canvas - TBD. probably just a tag with the way to pass
attrivutes.

- [x] code - Code blocks like fenced code blocks but you can add 
an arbitrary number of attributes.

- [x] comment - Parsed like text sections but with the 
expectation that it won't output unless the implementation
is specifically designed to do so.

- [p2] css - A place to put CSS that will be inlined in the page

- [p2] `custom`` - A way to make custom section tags outside of the
standard set. Definition, creation, parsing, and output are all
details left up to the individual implementation. The expectation 
is that the first attribute will be just a key with the name
of the thing to do. 

- [p2] details - The HTML <<link|
details|
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details>>
tag

- [p2] dlist - The HTML <<link|
<dl>|
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl>> 
description list

- [x] div - A <<link|
<div>|
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div
>> wrapper that can be used to add attributes to sections 
of content

- [p2] figure - The HTML figure element

- [p2] form - TBD on form setups

- [] footnote

- [x] h1-h6

- [] html

- [p2] iframe - 

- [p2] image

- [x] list

- [p2] menu

- [p2] nav

- [x] note - A basic div wrapper with a `note`` attribute and 
any other attributes that are passed in

- [] notes - A list style notes section

- [p2] object

- [] olist - An ordered list

- [x] p - Basic text paragraph tags that are not otherwise 
contained in a div. 

- [p2] picture

- [p2] pre

- [] reference

- [p2] script

- [x] subtitle

- [] startcode/endcode

- [p2] table 

- [p2] textarea

- [p2] tiktok 

- [x] title

- [p2] todo

- [p2] video

- [x] vimeo - A vimeo embed

- [x] warning - A div block with a warning class on it

- [p2] wc - A web component. The first attribute is just
a key with no value. It's the name that is used to create
the web component. Attributes are inserted directly 
and the content is output in between the components
tags. No additional processing is done to the content.

- [p2] widget - The first attribute is the name of the
widget which is use by the processor to render the
content. 

- [x] youtube - A youtube embed


-> h3

Inline Tags

Most of the section types hold text content. That
text content is split into `<p>`` tags by default
and the text inside of them is parsed for inline 
tags and shorthand codes. 

Inline tags start with two `<<`` and end with 
a closing `>>`` set. Here's the list with 
`x`` indicating the ones that are implemented
and `.`` indicating that are still under 
consideration. (This is basically the list
of html elements)

-> list

- [] ^ - footnote marker - for use with footnote sections

- [p2] abbr - Abbreviation

- [p2] audio - Audio 

- [x] b - Bring attention

- [p2] button - Button 

- [p2] cite - Cite 

- [x] code [c] - Code

- [p2] data - Data

- [p2] del - Del

- [p2] dfn - Definition

- [x] em - Emphasis

- [x] i - Idiomatic text 

- [p2] img - Image 

- [p2] input - Input 

- [p2] ins - Insert 

- [x] kbd [k] - Keyboard input 

- [p2] label - Label 

- [p2] legend - Legend 

- [x] link [l] - Link

- [p2] meter - Leter

- [p2] object - Object 

- [p2] progress - Progress 

- [p2] q - Quotation 

- [p2] samp - Sample Output 

- [p2] small - Small text (side comment) 

- [x] strike - Strikethru 

- [x] span - Span

- [x] strong [s] - Strong

- [x] sub - Subscript

- [x] sup - Superscript

- [p2] time - Time

- [x] u - Unarticulated Annotation

- [p2] var - Variable

- [p2] wbr - Line Break Opportunity



-> p




Neopolitan

Here's what I'm thinking

-> list

- Focused on text based content

- Plain-text

- White-space is not meaningful except for using 
blank lines between sections and blocks

- A variety of section types

- Individual sections for metadata

- Arbitrary attributes can be added to sections 
including code blocks.

- Arbitrary attributes can be added to inline 
tags

- A collection of sections and inline tags that
provides all <<link|standard HTML elements|
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html>>

- The spec defines the AST, not the final output. 
That's left up to the rendering engine.

- Footnotes

- References

- Result blocks in addition to code blocks (with 
the goal of getting my editor to generate them
automatically like Org-Mode)



-> h2

Under Consideration

Some other things I have in mind:

-> list

- A `widget`` section type that's used to pass
data to the rendered page (via whatever method
the implementation 

- A `css`` section type designed to include CSS
that should be added as the last `<style>`html`
tag in the `<head>`html` of the document

- A `script` section type designed to include
a `<script></script>`html` in the head of the
document

- Includes sections that include other files


-> p


Every approach involves friction that 
slows me down both from making posts an experimenting
with my site on a larger level.

For example:

-> list


- a b

cd

- e f 


-> p


I don't know all the different ways I'll build
my side over the next two decades, but I know the





The first examination is the code. I'm switching to 
vanilla HTML, CSS, and JavaScript. There's a lot
to be written about that later. For now, suffice it 
to say that, for my personal site, frameworks have been a net 
negative for me. I'm bowing out of that game. 


-> h3

Plain-text


I'm a huge fan of plain-text. My Grimoire has
nine thousand Markdown, MDX, and Org-Mode files 
in it. They're solid formats, but each causes
its own type of friction. For example, I don't
use description lists because they aren't native 
to the MDX parser I'm using.

So, I'm making my own format.


-> h2

Neopolitan Features

The format is still in its early stages
and very much in flux. That said, the 
basic ideas are mostly in place.

-> aside
>> id: firstAside
>> class: highlighted

There's a bunch of code samples below. The
format is more about text content. Parsing
through collections of short samples took
me a little getting used to.

-> h2

Samples

Below are some samples that will 
be overwritten when the actual content.

-> code
>> rust

this is a test with code

and some more code

-> h2

Next Steps

Most of the above is pretty well defined. The rest of this
below is a little more fluid. Their ideas I expect I'll
get to, but the priority is everything above.

-> h2

Examples

This is a test list

-> list

- a 

- b

- c

-> p

and that's the end of the list



-> h3

Other ideas

-> list

- An `-> og` tag to put in open graph values? Need 
to thing about how that would work.

-> p

Holding (attributes aren't being parsed yet so this
is hacked out)

-> h2

-> attributes
>> date: 2023-04-03 12:10:46
>> id: 2nvihspm8vaa
>> site: aws
>> type: post
>> status: draft 

