-> title

Welcome To Neopolitan

-> subtitle

A plain-text format for websites

-> note
>> class: highlighted

This site is an early draft. I wouldn't normally publish 
something this rough but I'm doing the "build in public" 
thing using this site as a live test bed.

Please pardon the mess.


-> h2

Introduction


My site is twenty years old. Pondering those decades got 
me thinking about the next two. I find myself asking "What do 
I want to use for the next twenty years?" instead of "What do 
I want to do for my next redesign?" The answers are very different.

-> h2

The Format

I've moved my site a half dozen times. Each one
involved a painful content migration. I've gone from 
raw HTML to Perl scripts to Wordpress to PHP with 
various DB schemas to Markdown to MDX to Org-Mode 
to a mix of all of the above.

I want aspects of each of those rolled into a single format. 
I haven't found anything like that. So, I'm rolling my own.
It's called Neopolitan and it looks like this:


-> startcode
>> neo

-> title

Welcome To Neopolitan

-> subtitle

A plain-text format for websites

-> note
>> class: highlighted

This site is an early draft. I wouldn't normally 
publish something this rough but I'm doing the 
"build in public" thing using this site as a live 
test bed.

Please pardon the mess.

-> h2

Introduction

My site is twenty years old. Pondering those decades 
got me thinking about the next two. I find myself 
asking "What do I want to use for the next twenty 
years?" instead of "What do I want to do for my 
next redesign?" The answers are very different.

-> attributes
>> date: 2023-04-16 19:06:40
>> type: default 
>> published: y

-> endcode

-> h2

Content Sections

Neopolitan documents are divided into sections. 
Each one starts with a `->`neo` token followed
by the name of the section. The type of section 
determines what happens with the content inside
it. For example, the `-> h2`neo` section becomes
an `<h2>`html` element:


-> startneoexample

-> h2

Bring your best compass 

-> endneoexample

-> p

While `-> list`` sections use `-`` characters
to define list items:

-> startneoexample

-> list

- Raise the sail

- Shut the hatch 

-> endneoexample

-> h2

Full Section List

The full section list is <<here|link|/sections/index.html>>



-> h2

HTML Equivalents

Most HTML tags have equivalent sections. Take, 
`-> aside`neo`, for example, which works like this:

-> startneoexample

-> aside

Tear a thin sheet from the yellow pad.

-> endneoexample


-> h2

Raw HTML

A raw `-> html`neo` section provides the ability to 
pass raw HTML directly to the final output

-> startneoexample

-> html

<form>
    <label for="name">Enter your name: </label>
    <input type="text" name="name" id="name" required>
</form>

-> endneoexample



-> h2

Meta Content

Section with differen types of metadata are included
as well. For example, `-> attributes`` sections provide 
key/value pairs at the page level to the processing 
engine. `-> css`` and `-> script`` sections push their 
content into the head of the document to provide
increased customization.

-> startneoexample

-> css

.highlight {
  background: white;
}

-> endneoexample

-> h2

Inline Tags

Several inline tags are provided for styling, linking, 
etc...

-> startneoexample

-> p

The <<colt|strong>> reared.

-> endneoexample

-> h2

Inline Tag Attributes

Key/value pairs passed to inline tags output
as attributes:

-> startneoexample

-> p

The <<tree top|strike|id: alfa|class: bravo>> waved

-> endneoexample


-> h2

Inline Shorthand

Shorthand versions of `code``, `em``, `link``, and 
`strong`` look like this:

-> startneoexample

-> p

`alfa``

_bravo__

>charlie>https://www.example.com/>

*delta**

-> endneoexample


-> h2

Inline Shorthand Attributes

Attributes can also be added to the shorthand 
tags:


-> startneoexample

-> p

`echo`id: foxtrot|class: highlighted`

-> endneoexample


-> h2

Inline Code Language Shorthand


-> startneoexample

-> p

`delta`rust`

`echo`rust|id: sierra`

-> endneoexample

-> warning

Adding an explicit `class`` along with
the language currenly results in two
`class`` attributes being added to the
output. That is, this would be a problem:

-> startneoexample

-> p

`echo`rust|class: highlighted`

-> endneoexample



-> h2

An AST Not An Output

The HTML outputs shown above are from my processing 
implementation. They're an optional starting point, 
not a spec. Neopolitan output is an implementation 
details. The thing that has the spec is the AST
that's generated by parsing a document. 


-> attributes
>> date: 2023-04-16 19:06:40
>> id: 2owpsh3aov3w
>> type: default 
>> published: y


