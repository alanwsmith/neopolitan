
-> h3

Inline Tags

Most of the section types hold text content. That
text content is split into `<p>`` tags by default
and the text inside of them is parsed for inline 
tags and shorthand codes. 

Inline tags start with two `<<`` and end with 
a closing `>>`` set. Here's the list with 
`x`` indicating the ones that are implemented
and `.`` indicating that are still under 
consideration. (This is basically the list
of html elements)

-> list

- [] ^ - footnote marker - for use with footnote sections

- [p2] abbr - Abbreviation

- [p2] audio - Audio 

- [x] b - Bring attention

- [p2] button - Button 

- [p2] cite - Cite 

- [x] code [c] - Code

- [p2] data - Data

- [p2] del - Del

- [p2] dfn - Definition

- [x] em - Emphasis

- [x] i - Idiomatic text 

- [p2] img - Image 

- [p2] input - Input 

- [p2] ins - Insert 

- [x] kbd [k] - Keyboard input 

- [p2] label - Label 

- [p2] legend - Legend 

- [x] link [l] - Link

- [p2] meter - Leter

- [p2] object - Object 

- [p2] progress - Progress 

- [p2] q - Quotation 

- [p2] samp - Sample Output 

- [p2] small - Small text (side comment) 

- [x] strike - Strikethru 

- [x] span - Span

- [x] strong [s] - Strong

- [x] sub - Subscript

- [x] sup - Superscript

- [p2] time - Time

- [x] u - Unarticulated Annotation

- [p2] var - Variable

- [p2] wbr - Line Break Opportunity



-> p




Neopolitan

Here's what I'm thinking

-> list

- Focused on text based content

- Plain-text

- White-space is not meaningful except for using 
blank lines between sections and blocks

- A variety of section types

- Individual sections for metadata

- Arbitrary attributes can be added to sections 
including code blocks.

- Arbitrary attributes can be added to inline 
tags

- A collection of sections and inline tags that
provides all <<standard HTML elements|link|
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html>>

- The spec defines the AST, not the final output. 
That's left up to the rendering engine.

- Footnotes

- References

- Result blocks in addition to code blocks (with 
the goal of getting my editor to generate them
automatically like Org-Mode)



-> h2

Under Consideration

Some other things I have in mind:

-> list

- A `widget`` section type that's used to pass
data to the rendered page (via whatever method
the implementation 

- A `css`` section type designed to include CSS
that should be added as the last `<style>`html`
tag in the `<head>`html` of the document

- A `script` section type designed to include
a `<script></script>`html` in the head of the
document

- Includes sections that include other files


-> p


Every approach involves friction that 
slows me down both from making posts an experimenting
with my site on a larger level.

For example:

-> list


- a b

cd

- e f 


-> p


I don't know all the different ways I'll build
my side over the next two decades, but I know the





The first examination is the code. I'm switching to 
vanilla HTML, CSS, and JavaScript. There's a lot
to be written about that later. For now, suffice it 
to say that, for my personal site, frameworks have been a net 
negative for me. I'm bowing out of that game. 


-> h3

Plain-text


I'm a huge fan of plain-text. My Grimoire has
nine thousand Markdown, MDX, and Org-Mode files 
in it. They're solid formats, but each causes
its own type of friction. For example, I don't
use description lists because they aren't native 
to the MDX parser I'm using.

So, I'm making my own format.


-> h2

Neopolitan Features

The format is still in its early stages
and very much in flux. That said, the 
basic ideas are mostly in place.

-> aside
>> id: firstAside
>> class: highlighted

There's a bunch of code samples below. The
format is more about text content. Parsing
through collections of short samples took
me a little getting used to.

-> h2

Samples

Below are some samples that will 
be overwritten when the actual content.

-> code
>> rust

this is a test with code

and some more code

-> h2

Next Steps

Most of the above is pretty well defined. The rest of this
below is a little more fluid. Their ideas I expect I'll
get to, but the priority is everything above.

-> h2

Examples

This is a test list

-> list

- a 

- b

- c

-> p

and that's the end of the list



-> h3

Other ideas

-> list

- An `-> og` tag to put in open graph values? Need 
to thing about how that would work.

-> p

Holding (attributes aren't being parsed yet so this
is hacked out)

-> h2

-> attributes
>> date: 2023-04-03 12:10:46
>> id: 2nvihspm8vaa
>> site: aws
>> type: post
>> status: draft 

