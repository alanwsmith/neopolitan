---: CONTENT 

# Neapolitan Guidelines

## Overview

This document lays out the plain-text format I'm 
using to overhaul my site. Working on my site
is no longer fun. It's a constant struggle against
the opinions of frameworks and the limitations 
of 



This document is to determine the design of the
content that'll be used for the site. I've been
using markdown. It's been solid, but always feels
a little constraining.

Getting out from under those constraints from the
framework side of things is the key reason I'm redoing
the site. I've been using Org Mode and was going to
do a combination of Org Mode and Markdown for the content
but that would keep me locked into those constraints.
They aren't bad, but I want to see what I can do without
them.

So this is where I'm setting up the spec for the format
I'm going to use.

---: TODO

[] Close ordered and unordered lists if they are 
at the end of a section and don't have other lines
behind them

[] Made from something like an unordered list

[] But with a custom div wrapping it for styling

[] Deal with multi line
todos that might
    have indents

[x] Also deal with ones that should be check off

---: HTML

<h3>HTML</h3>

<div>This text is in a div under an <code>#+HTML</code> token</div>

<div class="test-class">
It will be passed straight thru and things like ampersands
(&amp;) won't be modified
</div>

---: CONTENT

This is back to the basic content setup.

Here is a <<link|0|link>>

Things to deal with:

- Unordered Lists

- With stuff in them that is basic

- And catch multiline
  in lists

Also need to do "quotes"

And less than < and  greater than >

Going to to ahead and do the ' single quote too

And the & ampersand

---: WIDGET

{ 
  "id": "prototype-example",
  "type": "prototype-example",
  "words": [
    "Widgets ar defined by JSON in the content",
    "It's up to the processor to handle them"
  ]
}

---: CONTENT

This is an ordered list. 

1. They start with numbers followed by a dot

2. There must be a blank row between the numbers

3. Multiple lines require white space before
    the first character

12. The actual number doesn't matter, they will
    be numbered automatically in the HTML

This line is here because lists don't currently 
close if they are followed by another section 
without some text in between. 

---: NOTES

- Thinking this will be like basic text 
processing, but inside a custom div

- Since so many posts have notes, it seems 
worth it

- Notes can also have links. For example: 
<<link|0|here is my links page>>

- And this is the character check: 
& > < " '

---: HIDDEN

This is an internal note that would be
output. Super handy when you publish 
directly from your notes app, but some 
of the things in there wouldn't make 
sense to anybody else. 


---: CONTENT


Here's a footnote<<footnote|2>>. Implementation 
determines if it's a link or not.


---: DIV 
:::: :class custom-class

This content is wrapped in a div with a custom class.

---: CONTENT 

And we're back to normal with a horizontal rule

---

And the different sized headers:

# H1 Alpha

## H2 Bravo

### H3 Charlie 

#### H4 Delta

##### H5 Echo

###### H6 Foxtrot


---: NOTE

Stand alone notes are a thing. 

They are parsed like regular content. 
The difference is that they have their own
div wrapper which can have attributes applied. 

---: CONTENT


Something else that can go in is Org Mode source blocks


#+begin_src python :results output :wrap example

print('the quick brown fox')

#+end_src

#+RESULTS:
#+begin_example

the quick brown fox

#+end_example

There are also examples that aren't the results of #+begin_src blocks

#+begin_example

Data is here

#+end_example

## Images

Images are done in a similar way to links:

<<image|0>>

But the data for the images is stored in JSON so alt 
text can be applied.

---: DIV

Some Content can go in divs. It's processed
the same as the main content. It simply
wraps the content in a div. 

Not so useful by themselves, but applying
custom headers to them provides the major
potential


---: DIV
:::: :id example-with-id
:::: :class delta-class echo-class 
:::: :data-type supplement attribute example


Then back into a div that has addition attributes 
associated with it.


---: CONTENT

## Inline Code

Maybe something <<code|print('like this')|python>>

There won't be <<code|```>> code fences. Blocks are done 
in <<code|#+begin_src>> blocks. 

First stages, line breaks can't go in inline code.

Code inside double < snippets gets escaped too. 


## Other stuff

Almost forgot *bold* and _italic_ which I know aren't
the preferred names, but it's all I can remember at the 
moment. 

#+begin_html

<p>This is the Org Mode style of adding HTML</p>
<p>It's output directly minus trimming the 
trailing and leading white space.
</p>
<pre><code class="language-text">
So
   You
      Can
         Do
           Code
               In
                 It
</code></pre>


#+end_html

### UL Header Test

- This is testing a UL

- That's followed by a header

### Done With UL Header Test


---: TODO

[] Maybe setup so there doesn't have to be
white space in the lines under ordered and
unordered lists

[] Deal with character escaping inside of
of links

[] Setup ordered and unordered lists so they
can have spaces or not have spaces on the
following lines

[] Remove leading and trailing spaces from
code blocks in output (implementation detail)

[] Setup so you can pass attribute sets
to images

[] Add a way to show doulbe <

[] Handle "`" incline code.




---: FOOTNOTES

1. This is how footnotes will work
2. They can have <<link|3|links>> in them


---: IMAGES

[
  {
    "src": "https://placekitten.com/200/300",
    "alt": "A placeholder that's a kitten"
  }
]


---: LINKS

[
  { 
    "href": "https://links.alanwsmith.com/",
    "aria-label": "Visit my links pages"
  },
  {
    "href": "https://hacking.alanwsmith.com/",
    "aria-label": "An animated gif of hacking"
  },
  {
    "href": "https://pixel-art.alanwsmith.com/",
    "aria-label": "A pixel art page made with not javascript or css"
  }
]




---: META

#+DATE: 2022-11-05 19:15:05
#+BLURB: 
#+UPDATED: 
#+ID: 2h9guejvd7ce
#+CATEGORY: Miscellaneous
#+FACET: 
#+SITE: aws
#+STATUS: pending
#+TYPE: post
#+SHOWDATE: false
#+SCRUBBED_ORG: true
#+CUSTOM_THING: This is metadata that can be used in the output
#+CUSTOM_THING2: But it won't show up in the main HTML output from the post object.



